<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://0.0.0.0:4000/blog/feed.xml" rel="self" type="application/atom+xml" /><link href="http://0.0.0.0:4000/blog/" rel="alternate" type="text/html" /><updated>2023-09-09T10:35:57+08:00</updated><id>http://0.0.0.0:4000/blog/feed.xml</id><title type="html">陈方勇的网络笔记</title><subtitle>陈方勇的网络笔记
</subtitle><author><name>chenfy27</name></author><entry><title type="html">leetcode 51-60</title><link href="http://0.0.0.0:4000/blog/2018/08/11/leetcode-51-60.html" rel="alternate" type="text/html" title="leetcode 51-60" /><published>2018-08-11T00:00:00+08:00</published><updated>2018-08-11T00:00:00+08:00</updated><id>http://0.0.0.0:4000/blog/2018/08/11/leetcode-51-60</id><content type="html" xml:base="http://0.0.0.0:4000/blog/2018/08/11/leetcode-51-60.html"><![CDATA[<h3 id="51n皇后"><a href="https://leetcode-cn.com/problems/n-queens/description/">51.N皇后</a></h3>

<p>将n个皇后放在nxn的棋盘上，使皇后之间不能相互攻击，求所有可行解。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">solveNQueens</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">
        :type n: int
        :rtype: List[List[str]]
        </span><span class="sh">"""</span>
        
        <span class="k">def</span> <span class="nf">ok</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">tab</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
                <span class="k">if</span> <span class="n">tab</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">==</span> <span class="sh">'</span><span class="s">Q</span><span class="sh">'</span><span class="p">:</span>
                    <span class="k">return</span> <span class="bp">False</span>
            <span class="n">i</span><span class="p">,</span> <span class="n">j</span> <span class="o">=</span> <span class="n">x</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">y</span><span class="o">-</span><span class="mi">1</span>
            <span class="k">while</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">j</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">:</span>
                <span class="k">if</span> <span class="n">tab</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="sh">'</span><span class="s">Q</span><span class="sh">'</span><span class="p">:</span>
                    <span class="k">return</span> <span class="bp">False</span>
                <span class="n">i</span> <span class="o">-=</span> <span class="mi">1</span>
                <span class="n">j</span> <span class="o">-=</span> <span class="mi">1</span>
            <span class="n">i</span><span class="p">,</span> <span class="n">j</span> <span class="o">=</span> <span class="n">x</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">y</span><span class="o">+</span><span class="mi">1</span>
            <span class="k">while</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">:</span>
                <span class="k">if</span> <span class="n">tab</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="sh">'</span><span class="s">Q</span><span class="sh">'</span><span class="p">:</span>
                    <span class="k">return</span> <span class="bp">False</span>
                <span class="n">i</span> <span class="o">-=</span> <span class="mi">1</span>
                <span class="n">j</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="k">return</span> <span class="bp">True</span>
        
        <span class="k">def</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">tab</span><span class="p">,</span> <span class="n">ans</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">x</span> <span class="o">==</span> <span class="n">n</span><span class="p">:</span>
                <span class="n">t</span> <span class="o">=</span> <span class="p">[]</span>
                <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">tab</span><span class="p">:</span>
                    <span class="n">t</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="sh">''</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">i</span><span class="p">))</span>
                <span class="n">ans</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>
                <span class="k">return</span>
            <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
                <span class="k">if</span> <span class="nf">ok</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">tab</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
                    <span class="n">tab</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">=</span> <span class="sh">'</span><span class="s">Q</span><span class="sh">'</span>
                    <span class="nf">dfs</span><span class="p">(</span><span class="n">x</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">tab</span><span class="p">,</span> <span class="n">ans</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span>
                    <span class="n">tab</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">=</span> <span class="sh">'</span><span class="s">.</span><span class="sh">'</span>
        
        <span class="n">ans</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">tab</span> <span class="o">=</span> <span class="p">[[</span><span class="sh">'</span><span class="s">.</span><span class="sh">'</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">n</span><span class="p">)]</span> <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">n</span><span class="p">)]</span>
        <span class="nf">dfs</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">tab</span><span class="p">,</span> <span class="n">ans</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">ans</span>
</code></pre></div></div>

<h3 id="52n皇后ii"><a href="https://leetcode-cn.com/problems/n-queens-ii/description/">52.N皇后II</a></h3>

<p>将n个皇后放在nxn的棋盘上，使皇后之间不能相互攻击，求所有解的数量。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">totalNQueens</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">
        :type n: int
        :rtype: int
        </span><span class="sh">"""</span>
        
        <span class="k">def</span> <span class="nf">ok</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">tab</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
                <span class="k">if</span> <span class="n">tab</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">==</span> <span class="sh">'</span><span class="s">Q</span><span class="sh">'</span><span class="p">:</span>
                    <span class="k">return</span> <span class="bp">False</span>
            <span class="n">i</span><span class="p">,</span> <span class="n">j</span> <span class="o">=</span> <span class="n">x</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">y</span><span class="o">-</span><span class="mi">1</span>
            <span class="k">while</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">j</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">:</span>
                <span class="k">if</span> <span class="n">tab</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="sh">'</span><span class="s">Q</span><span class="sh">'</span><span class="p">:</span>
                    <span class="k">return</span> <span class="bp">False</span>
                <span class="n">i</span> <span class="o">-=</span> <span class="mi">1</span>
                <span class="n">j</span> <span class="o">-=</span> <span class="mi">1</span>
            <span class="n">i</span><span class="p">,</span> <span class="n">j</span> <span class="o">=</span> <span class="n">x</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">y</span><span class="o">+</span><span class="mi">1</span>
            <span class="k">while</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">:</span>
                <span class="k">if</span> <span class="n">tab</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="sh">'</span><span class="s">Q</span><span class="sh">'</span><span class="p">:</span>
                    <span class="k">return</span> <span class="bp">False</span>
                <span class="n">i</span> <span class="o">-=</span> <span class="mi">1</span>
                <span class="n">j</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="k">return</span> <span class="bp">True</span>
        
        <span class="k">def</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">tab</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">ans</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">x</span> <span class="o">==</span> <span class="n">n</span><span class="p">:</span>
                <span class="n">ans</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
                <span class="k">return</span>
            <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
                <span class="k">if</span> <span class="nf">ok</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">tab</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
                    <span class="n">tab</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">=</span> <span class="sh">'</span><span class="s">Q</span><span class="sh">'</span>
                    <span class="nf">dfs</span><span class="p">(</span><span class="n">x</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">tab</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">ans</span><span class="p">)</span>
                    <span class="n">tab</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">=</span> <span class="sh">'</span><span class="s">.</span><span class="sh">'</span>
        
        <span class="n">ans</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">tab</span> <span class="o">=</span> <span class="p">[[</span><span class="sh">'</span><span class="s">.</span><span class="sh">'</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">n</span><span class="p">)]</span> <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">n</span><span class="p">)]</span>
        <span class="nf">dfs</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">tab</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">ans</span><span class="p">)</span>
        <span class="k">return</span> <span class="nf">len</span><span class="p">(</span><span class="n">ans</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="53最大子序和"><a href="https://leetcode-cn.com/problems/maximum-subarray/description/">53.最大子序和</a></h3>

<p>给定一个非空的整数数组，找出一个具有最大和的连续非空子数组，返回其最大和。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">maxSubArray</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">
        :type nums: List[int]
        :rtype: int
        </span><span class="sh">"""</span>
        <span class="n">dp</span> <span class="o">=</span> <span class="p">[</span><span class="n">nums</span><span class="p">[</span><span class="mi">0</span><span class="p">]]</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nf">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)):</span>
            <span class="n">dp</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">max</span><span class="p">(</span><span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">+</span><span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]))</span>
        <span class="k">return</span> <span class="nf">max</span><span class="p">(</span><span class="n">dp</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="54螺旋矩阵"><a href="https://leetcode-cn.com/problems/spiral-matrix/description/">54.螺旋矩阵</a></h3>

<p>给定一个包含mxn个元素的矩阵，按顺时针螺旋顺序，返回矩阵中的所有元素。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">spiralOrder</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">matrix</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">
        :type matrix: List[List[int]]
        :rtype: List[int]
        </span><span class="sh">"""</span>
        <span class="n">ans</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">matrix</span><span class="p">:</span> <span class="k">return</span> <span class="p">[]</span>
        <span class="n">m</span><span class="p">,</span> <span class="n">n</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">matrix</span><span class="p">),</span> <span class="nf">len</span><span class="p">(</span><span class="n">matrix</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
        <span class="n">tab</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">0</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">n</span><span class="p">)]</span> <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">m</span><span class="p">)]</span>
        <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span>
        <span class="k">while</span> <span class="nf">len</span><span class="p">(</span><span class="n">ans</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">m</span><span class="o">*</span><span class="n">n</span><span class="p">:</span>
            <span class="k">while</span> <span class="n">y</span><span class="o">+</span><span class="mi">1</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="ow">and</span> <span class="n">tab</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                <span class="n">y</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="n">ans</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">matrix</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">])</span>
                <span class="n">tab</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
            <span class="k">while</span> <span class="n">x</span><span class="o">+</span><span class="mi">1</span> <span class="o">&lt;</span> <span class="n">m</span> <span class="ow">and</span> <span class="n">tab</span><span class="p">[</span><span class="n">x</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                <span class="n">x</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="n">ans</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">matrix</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">])</span>
                <span class="n">tab</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
            <span class="k">while</span> <span class="n">y</span><span class="o">-</span><span class="mi">1</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">tab</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                <span class="n">y</span> <span class="o">-=</span> <span class="mi">1</span>
                <span class="n">ans</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">matrix</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">])</span>
                <span class="n">tab</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
            <span class="k">while</span> <span class="n">x</span><span class="o">-</span><span class="mi">1</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">tab</span><span class="p">[</span><span class="n">x</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                <span class="n">x</span> <span class="o">-=</span> <span class="mi">1</span>
                <span class="n">ans</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">matrix</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">])</span>
                <span class="n">tab</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
        <span class="k">return</span> <span class="n">ans</span>
</code></pre></div></div>

<h3 id="55跳跃游戏"><a href="https://leetcode-cn.com/problems/jump-game/description/">55.跳跃游戏</a></h3>

<p>给定一个非负整数数组，最初位于第一个位置，数组中每个元素代表在该位置可以跳跃的最大长度，判断是否能够到达最后一个位置。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">canJump</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">
        :type nums: List[int]
        :rtype: bool
        </span><span class="sh">"""</span>
        <span class="n">mx</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">x</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">nums</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="n">mx</span><span class="p">:</span>
                <span class="k">return</span> <span class="bp">False</span>
            <span class="n">mx</span> <span class="o">=</span> <span class="nf">max</span><span class="p">(</span><span class="n">mx</span><span class="p">,</span> <span class="n">i</span><span class="o">+</span><span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
        <span class="k">return</span> <span class="bp">True</span>
</code></pre></div></div>

<h3 id="56合并区间"><a href="https://leetcode-cn.com/problems/merge-intervals/description/">56.合并区间</a></h3>

<p>给出一个区间的集合，合并所有重叠的区间。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Definition for an interval.
# class Interval:
#     def __init__(self, s=0, e=0):
#         self.start = s
#         self.end = e
</span>
<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">merge</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">intervals</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">
        :type intervals: List[Interval]
        :rtype: List[Interval]
        </span><span class="sh">"""</span>
        <span class="n">intervals</span><span class="p">.</span><span class="nf">sort</span><span class="p">(</span><span class="n">key</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="p">.</span><span class="n">start</span><span class="p">)</span>
        <span class="n">ans</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">t</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">intervals</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">t</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
                <span class="n">t</span> <span class="o">=</span> <span class="n">i</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">if</span> <span class="n">t</span><span class="p">.</span><span class="n">end</span> <span class="o">&gt;=</span> <span class="n">i</span><span class="p">.</span><span class="n">start</span><span class="p">:</span>
                    <span class="n">t</span><span class="p">.</span><span class="n">end</span> <span class="o">=</span> <span class="nf">max</span><span class="p">(</span><span class="n">t</span><span class="p">.</span><span class="n">end</span><span class="p">,</span> <span class="n">i</span><span class="p">.</span><span class="n">end</span><span class="p">)</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="n">ans</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>
                    <span class="n">t</span> <span class="o">=</span> <span class="n">i</span>
        <span class="k">if</span> <span class="n">t</span><span class="p">:</span>
            <span class="n">ans</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">ans</span>
</code></pre></div></div>

<h3 id="57插入区间"><a href="https://leetcode-cn.com/problems/insert-interval/description/">57.插入区间</a></h3>

<p>给出一个元重复的，按照区间起始端点排序的区间列表，在列表中插入一个新的区间，要确保插完后新的列表中的区间仍然有序且不重复（如有必果，可以合并区间）。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Definition for an interval.
# class Interval:
#     def __init__(self, s=0, e=0):
#         self.start = s
#         self.end = e
</span>
<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">insert</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">intervals</span><span class="p">,</span> <span class="n">newInterval</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">
        :type intervals: List[Interval]
        :type newInterval: Interval
        :rtype: List[Interval]
        </span><span class="sh">"""</span>
        <span class="n">intervals</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">newInterval</span><span class="p">)</span>
        <span class="n">intervals</span><span class="p">.</span><span class="nf">sort</span><span class="p">(</span><span class="n">key</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="p">.</span><span class="n">start</span><span class="p">)</span>
        <span class="n">ans</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">t</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">intervals</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">t</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
                <span class="n">t</span> <span class="o">=</span> <span class="n">i</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">if</span> <span class="n">t</span><span class="p">.</span><span class="n">end</span> <span class="o">&gt;=</span> <span class="n">i</span><span class="p">.</span><span class="n">start</span><span class="p">:</span>
                    <span class="n">t</span><span class="p">.</span><span class="n">end</span> <span class="o">=</span> <span class="nf">max</span><span class="p">(</span><span class="n">t</span><span class="p">.</span><span class="n">end</span><span class="p">,</span> <span class="n">i</span><span class="p">.</span><span class="n">end</span><span class="p">)</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="n">ans</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>
                    <span class="n">t</span> <span class="o">=</span> <span class="n">i</span>
        <span class="k">if</span> <span class="n">t</span><span class="p">:</span> <span class="n">ans</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">ans</span>
</code></pre></div></div>

<h3 id="58最后一个单词的长度"><a href="https://leetcode-cn.com/problems/length-of-last-word/description/">58.最后一个单词的长度</a></h3>

<p>给定一个仅包含大小写字母和空格的字符串，返回其最后一个单词的长度。如不存在最后一个单词，返回0.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">lengthOfLastWord</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">s</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">
        :type s: str
        :rtype: int
        </span><span class="sh">"""</span>
        <span class="n">w</span> <span class="o">=</span> <span class="n">s</span><span class="p">.</span><span class="nf">split</span><span class="p">()</span>
        <span class="k">return</span> <span class="nf">len</span><span class="p">(</span><span class="n">w</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span> <span class="k">if</span> <span class="n">w</span> <span class="k">else</span> <span class="mi">0</span>
</code></pre></div></div>

<h3 id="59螺旋矩阵ii"><a href="https://leetcode-cn.com/problems/spiral-matrix-ii/description/">59.螺旋矩阵II</a></h3>

<p>给定一个正整数n，生成一个包含1到n*n所有元素，且元素按顺时针螺旋排列的方形矩阵。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">generateMatrix</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">
        :type n: int
        :rtype: List[List[int]]
        </span><span class="sh">"""</span>
        <span class="n">ans</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">0</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">n</span><span class="p">)]</span> <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">n</span><span class="p">)]</span>
        <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span>
        <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">while</span> <span class="n">cnt</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">*</span><span class="n">n</span><span class="p">:</span>
            <span class="k">while</span> <span class="n">y</span><span class="o">+</span><span class="mi">1</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="ow">and</span> <span class="n">ans</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                <span class="n">y</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="n">cnt</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="n">ans</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">=</span> <span class="n">cnt</span>
            <span class="k">while</span> <span class="n">x</span><span class="o">+</span><span class="mi">1</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="ow">and</span> <span class="n">ans</span><span class="p">[</span><span class="n">x</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                <span class="n">x</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="n">cnt</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="n">ans</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">=</span> <span class="n">cnt</span>
            <span class="k">while</span> <span class="n">y</span><span class="o">-</span><span class="mi">1</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">ans</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                <span class="n">y</span> <span class="o">-=</span> <span class="mi">1</span>
                <span class="n">cnt</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="n">ans</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">=</span> <span class="n">cnt</span>
            <span class="k">while</span> <span class="n">x</span><span class="o">-</span><span class="mi">1</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">ans</span><span class="p">[</span><span class="n">x</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                <span class="n">x</span> <span class="o">-=</span> <span class="mi">1</span>
                <span class="n">cnt</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="n">ans</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">=</span> <span class="n">cnt</span>
        <span class="k">return</span> <span class="n">ans</span>
</code></pre></div></div>

<h3 id="60第k个排列"><a href="https://leetcode-cn.com/problems/permutation-sequence/description/">60.第k个排列</a></h3>

<p>给出集合[1,2,3,…,n]，其所有元素共有n!种排列，求第k小的排列。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">getPermutation</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">k</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">
        :type n: int
        :type k: int
        :rtype: str
        </span><span class="sh">"""</span>
        <span class="n">z</span> <span class="o">=</span> <span class="p">[</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)]</span>
        <span class="n">p</span> <span class="o">=</span> <span class="mi">1</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="n">n</span><span class="p">):</span>
            <span class="n">p</span> <span class="o">*=</span> <span class="n">i</span>
        <span class="n">k</span> <span class="o">-=</span> <span class="mi">1</span>
        <span class="n">ans</span> <span class="o">=</span> <span class="sh">''</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
            <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="nf">divmod</span><span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">p</span><span class="p">)</span>
            <span class="n">ans</span> <span class="o">+=</span> <span class="nf">str</span><span class="p">(</span><span class="n">z</span><span class="p">.</span><span class="nf">pop</span><span class="p">(</span><span class="n">x</span><span class="p">))</span>
            <span class="n">k</span> <span class="o">=</span> <span class="n">y</span>
            <span class="k">if</span> <span class="n">n</span><span class="o">-</span><span class="mi">1</span> <span class="o">&gt;</span> <span class="n">i</span><span class="p">:</span>
                <span class="n">p</span> <span class="o">//=</span> <span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="o">-</span><span class="n">i</span>
        <span class="k">return</span> <span class="n">ans</span>
</code></pre></div></div>]]></content><author><name>chenfy27</name></author><category term="LeetCode" /><summary type="html"><![CDATA[51.N皇后]]></summary></entry><entry><title type="html">leetcode 41-50</title><link href="http://0.0.0.0:4000/blog/2018/08/10/leetcode-41-50.html" rel="alternate" type="text/html" title="leetcode 41-50" /><published>2018-08-10T00:00:00+08:00</published><updated>2018-08-10T00:00:00+08:00</updated><id>http://0.0.0.0:4000/blog/2018/08/10/leetcode-41-50</id><content type="html" xml:base="http://0.0.0.0:4000/blog/2018/08/10/leetcode-41-50.html"><![CDATA[<h3 id="41缺失的第一个正整数"><a href="https://leetcode-cn.com/problems/first-missing-positive/description/">41.缺失的第一个正整数</a></h3>

<p>给定一个未排序的整数数组，找出其中没有出现的最小正整数。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">firstMissingPositive</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">
        :type nums: List[int]
        :rtype: int
        </span><span class="sh">"""</span>
        <span class="n">s</span> <span class="o">=</span> <span class="nf">set</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span>
        <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span>
        <span class="k">while</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">s</span><span class="p">:</span>
            <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">return</span> <span class="n">i</span>
</code></pre></div></div>

<h3 id="42接雨水"><a href="https://leetcode-cn.com/problems/trapping-rain-water/description/">42.接雨水</a></h3>

<p>给定n个非负整数表示每个宽度为1的柱子的高度图，计算按此排列的柱子，下雨之后能接多少水。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">trap</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">height</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">
        :type height: List[int]
        :rtype: int
        </span><span class="sh">"""</span>
        <span class="n">n</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">height</span><span class="p">)</span>
        <span class="n">height</span><span class="p">.</span><span class="nf">insert</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
        <span class="n">height</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
        <span class="n">L</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="mi">5</span><span class="p">)</span>
        <span class="n">R</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="mi">5</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
            <span class="n">L</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="nf">max</span><span class="p">(</span><span class="n">L</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="n">height</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
            <span class="n">R</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="nf">max</span><span class="p">(</span><span class="n">R</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span> <span class="n">height</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
        <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
            <span class="n">ans</span> <span class="o">+=</span> <span class="nf">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nf">min</span><span class="p">(</span><span class="n">L</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="n">R</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">])</span> <span class="o">-</span> <span class="n">height</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
        <span class="k">return</span> <span class="n">ans</span>
</code></pre></div></div>

<h3 id="43字符串相乘"><a href="https://leetcode-cn.com/problems/multiply-strings/description/">43.字符串相乘</a></h3>

<p>给定两个以字符串形式表示的非负整数num1和num2，求其乘积，也用字符串表示。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">multiply</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">num1</span><span class="p">,</span> <span class="n">num2</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">
        :type num1: str
        :type num2: str
        :rtype: str
        </span><span class="sh">"""</span>
        <span class="k">return</span> <span class="nf">str</span><span class="p">(</span><span class="nf">int</span><span class="p">(</span><span class="n">num1</span><span class="p">)</span> <span class="o">*</span> <span class="nf">int</span><span class="p">(</span><span class="n">num2</span><span class="p">))</span>
</code></pre></div></div>

<h3 id="44-通配符匹配"><a href="https://leetcode-cn.com/problems/wildcard-matching/description/">44. 通配符匹配</a></h3>

<p>给定一个字符串s和一个字符模式p，实现一个支持'?'和'*'的通配匹配。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">isMatch</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">s</span><span class="p">,</span> <span class="n">p</span><span class="p">):</span>
        <span class="n">ls</span><span class="p">,</span> <span class="n">lp</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">s</span><span class="p">),</span> <span class="nf">len</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
        <span class="n">dp</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">False</span> <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">ls</span><span class="o">+</span><span class="mi">1</span><span class="p">)]</span> <span class="k">for</span> <span class="n">r</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">lp</span><span class="o">+</span><span class="mi">1</span><span class="p">)]</span>
        <span class="n">dp</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="bp">True</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">lp</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
            <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">p</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="sh">'</span><span class="s">*</span><span class="sh">'</span> <span class="ow">and</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">lp</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">ls</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
                <span class="k">if</span> <span class="n">p</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="n">s</span><span class="p">[</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="ow">or</span> <span class="n">p</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="sh">'</span><span class="s">?</span><span class="sh">'</span><span class="p">:</span>
                    <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
                <span class="k">elif</span> <span class="n">p</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="sh">'</span><span class="s">*</span><span class="sh">'</span><span class="p">:</span>
                    <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="ow">or</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
        <span class="k">return</span> <span class="n">dp</span><span class="p">[</span><span class="n">lp</span><span class="p">][</span><span class="n">ls</span><span class="p">]</span>
</code></pre></div></div>

<h3 id="45跳跃游戏"><a href="https://leetcode-cn.com/problems/jump-game-ii/description/">45.跳跃游戏</a></h3>

<p>给定一个非负整数数组，最初位于数组的第一个位置，数组中每个元素代表在该位置可以跳跃的最大长度，用最少的步数到达最后一个位置。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">jump</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">
        :type nums: List[int]
        :rtype: int
        </span><span class="sh">"""</span>
        <span class="n">C</span><span class="p">,</span> <span class="n">R</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span>
        <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">nums</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="n">C</span><span class="p">:</span>
                <span class="n">ans</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="n">C</span> <span class="o">=</span> <span class="n">R</span>
            <span class="n">R</span> <span class="o">=</span> <span class="nf">max</span><span class="p">(</span><span class="n">R</span><span class="p">,</span> <span class="n">i</span><span class="o">+</span><span class="n">j</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">ans</span>
</code></pre></div></div>

<h3 id="46全排列"><a href="https://leetcode-cn.com/problems/permutations/description/">46.全排列</a></h3>

<p>给定一个没有重复数字的序列，返回其所有可能的全排列。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">permute</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">
        :type nums: List[int]
        :rtype: List[List[int]]
        </span><span class="sh">"""</span>
        
        <span class="k">def</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">idx</span><span class="p">,</span> <span class="n">tmp</span><span class="p">,</span> <span class="n">nums</span><span class="p">,</span> <span class="n">ans</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">idx</span> <span class="o">==</span> <span class="nf">len</span><span class="p">(</span><span class="n">nums</span><span class="p">):</span>
                <span class="n">ans</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">tmp</span><span class="p">[::])</span>
                <span class="k">return</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">idx</span><span class="p">,</span> <span class="nf">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)):</span>
                <span class="n">nums</span><span class="p">[</span><span class="n">idx</span><span class="p">],</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">nums</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span>
                <span class="nf">dfs</span><span class="p">(</span><span class="n">idx</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">tmp</span><span class="o">+</span><span class="p">[</span><span class="n">nums</span><span class="p">[</span><span class="n">idx</span><span class="p">]],</span> <span class="n">nums</span><span class="p">,</span> <span class="n">ans</span><span class="p">)</span>
                <span class="n">nums</span><span class="p">[</span><span class="n">idx</span><span class="p">],</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">nums</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span>
            
        <span class="n">ans</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="nf">dfs</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="p">[],</span> <span class="n">nums</span><span class="p">,</span> <span class="n">ans</span><span class="p">)</span>
        <span class="k">return</span> <span class="nf">sorted</span><span class="p">(</span><span class="n">ans</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="47全排列ii"><a href="https://leetcode-cn.com/problems/permutations-ii/description/">47.全排列II</a></h3>

<p>给定一个可包含重复数字的序列，返回所有不重复的全排列。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">permuteUnique</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">
        :type nums: List[int]
        :rtype: List[List[int]]
        </span><span class="sh">"""</span>
        <span class="k">def</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">idx</span><span class="p">,</span> <span class="n">tmp</span><span class="p">,</span> <span class="n">nums</span><span class="p">,</span> <span class="n">ans</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">idx</span> <span class="o">==</span> <span class="nf">len</span><span class="p">(</span><span class="n">nums</span><span class="p">):</span>
                <span class="n">ans</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="nf">tuple</span><span class="p">(</span><span class="n">tmp</span><span class="p">))</span>
                <span class="k">return</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">idx</span><span class="p">,</span> <span class="nf">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)):</span>
                <span class="n">nums</span><span class="p">[</span><span class="n">idx</span><span class="p">],</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">nums</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span>
                <span class="nf">dfs</span><span class="p">(</span><span class="n">idx</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">tmp</span><span class="o">+</span><span class="p">[</span><span class="n">nums</span><span class="p">[</span><span class="n">idx</span><span class="p">]],</span> <span class="n">nums</span><span class="p">,</span> <span class="n">ans</span><span class="p">)</span>
                <span class="n">nums</span><span class="p">[</span><span class="n">idx</span><span class="p">],</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">nums</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span>
        
        <span class="n">ans</span> <span class="o">=</span> <span class="nf">set</span><span class="p">()</span>
        <span class="nf">dfs</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="p">[],</span> <span class="n">nums</span><span class="p">,</span> <span class="n">ans</span><span class="p">)</span>
        <span class="k">return</span> <span class="nf">sorted</span><span class="p">(</span><span class="nf">list</span><span class="p">(</span><span class="n">ans</span><span class="p">))</span>
</code></pre></div></div>

<h3 id="48旋转图像"><a href="https://leetcode-cn.com/problems/rotate-image/description/">48.旋转图像</a></h3>

<p>给定一个nxn的二维矩阵表示一个图像，将图像顺时针旋转90度。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">rotate</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">matrix</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">
        :type matrix: List[List[int]]
        :rtype: void Do not return anything, modify matrix in-place instead.
        </span><span class="sh">"""</span>
        <span class="n">n</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">matrix</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
                <span class="n">matrix</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">],</span> <span class="n">matrix</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">matrix</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">i</span><span class="p">],</span> <span class="n">matrix</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
            <span class="n">L</span><span class="p">,</span> <span class="n">R</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">n</span><span class="o">-</span><span class="mi">1</span>
            <span class="k">while</span> <span class="n">L</span> <span class="o">&lt;</span> <span class="n">R</span><span class="p">:</span>
                <span class="n">matrix</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">L</span><span class="p">],</span> <span class="n">matrix</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">R</span><span class="p">]</span> <span class="o">=</span> <span class="n">matrix</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">R</span><span class="p">],</span> <span class="n">matrix</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">L</span><span class="p">]</span>
                <span class="n">L</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="n">R</span> <span class="o">-=</span> <span class="mi">1</span>
</code></pre></div></div>

<h3 id="49字母异位词分组"><a href="https://leetcode-cn.com/problems/group-anagrams/description/">49.字母异位词分组</a></h3>

<p>给定一个字符串数组，将字母异位词组合在一起。字母异位词指字母相同，但排列不同的字符串。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">groupAnagrams</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">strs</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">
        :type strs: List[str]
        :rtype: List[List[str]]
        </span><span class="sh">"""</span>
        <span class="n">mp</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">strs</span><span class="p">:</span>
            <span class="n">k</span> <span class="o">=</span> <span class="sh">''</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="nf">sorted</span><span class="p">(</span><span class="n">i</span><span class="p">))</span>
            <span class="k">if</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">mp</span><span class="p">:</span>
                <span class="n">mp</span><span class="p">[</span><span class="n">k</span><span class="p">].</span><span class="nf">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">mp</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="n">i</span><span class="p">]</span>
        <span class="n">ans</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">mp</span><span class="p">.</span><span class="nf">values</span><span class="p">():</span>
            <span class="n">ans</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">v</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">ans</span>
</code></pre></div></div>

<h3 id="50求幂"><a href="https://leetcode-cn.com/problems/powx-n/description/">50.求幂</a></h3>

<p>实现pow(x,n)，即计算x的n次幂。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">myPow</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">
        :type x: float
        :type n: int
        :rtype: float
        </span><span class="sh">"""</span>
        <span class="k">return</span> <span class="nf">pow</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span>
</code></pre></div></div>]]></content><author><name>chenfy27</name></author><category term="LeetCode" /><summary type="html"><![CDATA[41.缺失的第一个正整数]]></summary></entry><entry><title type="html">leetcode 31-40</title><link href="http://0.0.0.0:4000/blog/2018/07/02/leetcode-31-40.html" rel="alternate" type="text/html" title="leetcode 31-40" /><published>2018-07-02T00:00:00+08:00</published><updated>2018-07-02T00:00:00+08:00</updated><id>http://0.0.0.0:4000/blog/2018/07/02/leetcode-31-40</id><content type="html" xml:base="http://0.0.0.0:4000/blog/2018/07/02/leetcode-31-40.html"><![CDATA[<h3 id="31下一个排列"><a href="https://leetcode-cn.com/problems/next-permutation/description/">31.下一个排列</a></h3>

<p>给出一组由正整数构成的序列，要求重排得到字典序中下一个更大的排列，如不存在则排成最小排列，要求原地修改。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>        
    <span class="k">def</span> <span class="nf">nextPermutation</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">
        :type nums: List[int]
        :rtype: void Do not return anything, modify nums in-place instead.
        </span><span class="sh">"""</span>
        
        <span class="k">def</span> <span class="nf">reverse</span><span class="p">(</span><span class="n">nums</span><span class="p">,</span> <span class="n">L</span><span class="p">,</span> <span class="n">R</span><span class="p">):</span>
            <span class="k">while</span> <span class="n">L</span> <span class="o">&lt;</span> <span class="n">R</span><span class="p">:</span>
                <span class="n">nums</span><span class="p">[</span><span class="n">L</span><span class="p">],</span> <span class="n">nums</span><span class="p">[</span><span class="n">R</span><span class="p">]</span> <span class="o">=</span> <span class="n">nums</span><span class="p">[</span><span class="n">R</span><span class="p">],</span> <span class="n">nums</span><span class="p">[</span><span class="n">L</span><span class="p">]</span>
                <span class="n">L</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="n">R</span> <span class="o">-=</span> <span class="mi">1</span>
        
        <span class="n">x</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span><span class="o">-</span><span class="mi">2</span>
        <span class="k">while</span> <span class="n">x</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">nums</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="n">nums</span><span class="p">[</span><span class="n">x</span><span class="o">+</span><span class="mi">1</span><span class="p">]:</span>
            <span class="n">x</span> <span class="o">-=</span> <span class="mi">1</span>
        <span class="k">if</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
            <span class="nf">reverse</span><span class="p">(</span><span class="n">nums</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nf">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">y</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span>
            <span class="k">while</span> <span class="n">nums</span><span class="p">[</span><span class="n">y</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">nums</span><span class="p">[</span><span class="n">x</span><span class="p">]:</span>
                <span class="n">y</span> <span class="o">-=</span> <span class="mi">1</span>
            <span class="n">nums</span><span class="p">[</span><span class="n">x</span><span class="p">],</span> <span class="n">nums</span><span class="p">[</span><span class="n">y</span><span class="p">]</span> <span class="o">=</span> <span class="n">nums</span><span class="p">[</span><span class="n">y</span><span class="p">],</span> <span class="n">nums</span><span class="p">[</span><span class="n">x</span><span class="p">]</span>
            <span class="nf">reverse</span><span class="p">(</span><span class="n">nums</span><span class="p">,</span> <span class="n">x</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="nf">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="32最长有效括号"><a href="https://leetcode-cn.com/problems/longest-valid-parentheses/description/">32.最长有效括号</a></h3>

<p>给定一个只包含'('和')'的字符串，找出最长的包含有效括号的子串的长度。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">longestValidParentheses</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">s</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">
        :type s: str
        :rtype: int
        </span><span class="sh">"""</span>
        <span class="n">stk</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">dp</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">j</span> <span class="o">==</span> <span class="sh">'</span><span class="s">(</span><span class="sh">'</span><span class="p">:</span>
                <span class="n">stk</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">if</span> <span class="n">stk</span><span class="p">:</span>
                    <span class="n">t</span> <span class="o">=</span> <span class="n">stk</span><span class="p">.</span><span class="nf">pop</span><span class="p">()</span>
                    <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span><span class="o">-</span><span class="n">t</span><span class="o">+</span><span class="mi">1</span>
                    <span class="k">if</span> <span class="n">t</span><span class="p">:</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+=</span> <span class="n">dp</span><span class="p">[</span><span class="n">t</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
        <span class="k">return</span> <span class="nf">max</span><span class="p">(</span><span class="n">dp</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="33搜索旋转数组"><a href="https://leetcode-cn.com/problems/search-in-rotated-sorted-array/description/">33.搜索旋转数组</a></h3>

<p>假设按照升序排序的数组在预先未知的某个点上进行了旋转，现要在数组中搜索一个给定的目标值，如果存在则返回索引，不存在返回-1。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">search</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">,</span> <span class="n">target</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">
        :type nums: List[int]
        :type target: int
        :rtype: int
        </span><span class="sh">"""</span>
        
        <span class="k">def</span> <span class="nf">find1</span><span class="p">(</span><span class="n">L</span><span class="p">,</span> <span class="n">R</span><span class="p">,</span> <span class="n">nums</span><span class="p">,</span> <span class="n">target</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">L</span> <span class="o">&gt;</span> <span class="n">R</span><span class="p">:</span> <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
            <span class="k">if</span> <span class="n">nums</span><span class="p">[</span><span class="n">L</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">nums</span><span class="p">[</span><span class="n">R</span><span class="p">]:</span>
                <span class="k">return</span> <span class="nf">find2</span><span class="p">(</span><span class="n">L</span><span class="p">,</span> <span class="n">R</span><span class="p">,</span> <span class="n">nums</span><span class="p">,</span> <span class="n">target</span><span class="p">)</span>
            <span class="n">M</span> <span class="o">=</span> <span class="n">L</span> <span class="o">+</span> <span class="p">(</span><span class="n">R</span><span class="o">-</span><span class="n">L</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span>
            <span class="k">if</span> <span class="n">nums</span><span class="p">[</span><span class="n">L</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">nums</span><span class="p">[</span><span class="n">M</span><span class="p">]:</span>
                <span class="k">if</span> <span class="n">nums</span><span class="p">[</span><span class="n">L</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">target</span> <span class="o">&lt;=</span> <span class="n">nums</span><span class="p">[</span><span class="n">M</span><span class="p">]:</span>
                    <span class="k">return</span> <span class="nf">find2</span><span class="p">(</span><span class="n">L</span><span class="p">,</span> <span class="n">M</span><span class="p">,</span> <span class="n">nums</span><span class="p">,</span> <span class="n">target</span><span class="p">)</span>
                <span class="k">return</span> <span class="nf">find1</span><span class="p">(</span><span class="n">M</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">R</span><span class="p">,</span> <span class="n">nums</span><span class="p">,</span> <span class="n">target</span><span class="p">)</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">if</span> <span class="n">nums</span><span class="p">[</span><span class="n">M</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">target</span> <span class="o">&lt;=</span> <span class="n">nums</span><span class="p">[</span><span class="n">R</span><span class="p">]:</span>
                    <span class="k">return</span> <span class="nf">find2</span><span class="p">(</span><span class="n">M</span><span class="p">,</span> <span class="n">R</span><span class="p">,</span> <span class="n">nums</span><span class="p">,</span> <span class="n">target</span><span class="p">)</span>
                <span class="k">return</span> <span class="nf">find1</span><span class="p">(</span><span class="n">L</span><span class="p">,</span> <span class="n">M</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">nums</span><span class="p">,</span> <span class="n">target</span><span class="p">)</span>

        <span class="k">def</span> <span class="nf">find2</span><span class="p">(</span><span class="n">L</span><span class="p">,</span> <span class="n">R</span><span class="p">,</span> <span class="n">nums</span><span class="p">,</span> <span class="n">target</span><span class="p">):</span>
            <span class="n">lo</span><span class="p">,</span> <span class="n">hi</span> <span class="o">=</span> <span class="n">L</span><span class="p">,</span> <span class="n">R</span>
            <span class="k">while</span> <span class="n">lo</span> <span class="o">&lt;=</span> <span class="n">hi</span><span class="p">:</span>
                <span class="n">mid</span> <span class="o">=</span> <span class="n">lo</span> <span class="o">+</span> <span class="p">(</span><span class="n">hi</span><span class="o">-</span><span class="n">lo</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span>
                <span class="k">if</span> <span class="n">nums</span><span class="p">[</span><span class="n">mid</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">target</span><span class="p">:</span>
                    <span class="n">lo</span> <span class="o">=</span> <span class="n">mid</span><span class="o">+</span><span class="mi">1</span>
                <span class="k">elif</span> <span class="n">nums</span><span class="p">[</span><span class="n">mid</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">target</span><span class="p">:</span>
                    <span class="n">hi</span> <span class="o">=</span> <span class="n">mid</span><span class="o">-</span><span class="mi">1</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="k">return</span> <span class="n">mid</span>
            <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>

        <span class="k">return</span> <span class="nf">find1</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nf">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">nums</span><span class="p">,</span> <span class="n">target</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="34搜索范围"><a href="https://leetcode-cn.com/problems/search-for-a-range/description/">34.搜索范围</a></h3>

<p>给定一个按照升序排列的整数数组和一个目标值，找出给定目标值在数组中的开始位置和结束位置，如不存在，则返回[-1,-1]。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">searchRange</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">,</span> <span class="n">target</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        </span><span class="sh">"""</span>
        
        <span class="k">def</span> <span class="nf">find1</span><span class="p">(</span><span class="n">nums</span><span class="p">,</span> <span class="n">target</span><span class="p">):</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">nums</span><span class="p">:</span> <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
            <span class="n">lo</span><span class="p">,</span> <span class="n">hi</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nf">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span>
            <span class="k">while</span> <span class="n">lo</span> <span class="o">&lt;</span> <span class="n">hi</span><span class="p">:</span>
                <span class="n">mid</span> <span class="o">=</span> <span class="n">lo</span> <span class="o">+</span> <span class="p">(</span><span class="n">hi</span><span class="o">-</span><span class="n">lo</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span>
                <span class="k">if</span> <span class="n">nums</span><span class="p">[</span><span class="n">mid</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">target</span><span class="p">:</span>
                    <span class="n">lo</span> <span class="o">=</span> <span class="n">mid</span><span class="o">+</span><span class="mi">1</span>
                <span class="k">elif</span> <span class="n">nums</span><span class="p">[</span><span class="n">mid</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">target</span><span class="p">:</span>
                    <span class="n">hi</span> <span class="o">=</span> <span class="n">mid</span><span class="o">-</span><span class="mi">1</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="n">hi</span> <span class="o">=</span> <span class="n">mid</span>
            <span class="k">if</span> <span class="n">lo</span> <span class="o">&lt;</span> <span class="nf">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span> <span class="ow">and</span> <span class="n">nums</span><span class="p">[</span><span class="n">lo</span><span class="p">]</span> <span class="o">==</span> <span class="n">target</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">lo</span>
            <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>

        <span class="k">def</span> <span class="nf">find2</span><span class="p">(</span><span class="n">nums</span><span class="p">,</span> <span class="n">target</span><span class="p">):</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">nums</span><span class="p">:</span> <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
            <span class="n">lo</span><span class="p">,</span> <span class="n">hi</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nf">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span>
            <span class="k">while</span> <span class="n">lo</span> <span class="o">&lt;</span> <span class="n">hi</span><span class="p">:</span>
                <span class="n">mid</span> <span class="o">=</span> <span class="n">lo</span> <span class="o">+</span> <span class="p">(</span><span class="n">hi</span><span class="o">-</span><span class="n">lo</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span>
                <span class="k">if</span> <span class="n">nums</span><span class="p">[</span><span class="n">mid</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">target</span><span class="p">:</span>
                    <span class="n">lo</span> <span class="o">=</span> <span class="n">mid</span><span class="o">+</span><span class="mi">1</span>
                <span class="k">elif</span> <span class="n">nums</span><span class="p">[</span><span class="n">mid</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">target</span><span class="p">:</span>
                    <span class="n">hi</span> <span class="o">=</span> <span class="n">mid</span><span class="o">-</span><span class="mi">1</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="n">lo</span> <span class="o">=</span> <span class="n">mid</span>
            <span class="k">if</span> <span class="n">lo</span> <span class="o">&lt;</span> <span class="nf">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span> <span class="ow">and</span> <span class="n">nums</span><span class="p">[</span><span class="n">lo</span><span class="p">]</span> <span class="o">==</span> <span class="n">target</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">lo</span>
            <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
    
        <span class="n">L</span> <span class="o">=</span> <span class="nf">find1</span><span class="p">(</span><span class="n">nums</span><span class="p">,</span> <span class="n">target</span><span class="p">)</span>
        <span class="n">R</span> <span class="o">=</span> <span class="nf">find2</span><span class="p">(</span><span class="n">nums</span><span class="p">,</span> <span class="n">target</span><span class="p">)</span>
        <span class="k">return</span> <span class="p">[</span><span class="n">L</span><span class="p">,</span> <span class="n">R</span><span class="p">]</span>
</code></pre></div></div>

<h3 id="35搜索插入位置"><a href="https://leetcode-cn.com/problems/search-insert-position/description/">35.搜索插入位置</a></h3>

<p>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果不存在，则返回它将会被按顺序插入的位置。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">searchInsert</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">,</span> <span class="n">target</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">
        :type nums: List[int]
        :type target: int
        :rtype: int
        </span><span class="sh">"""</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">nums</span><span class="p">:</span> <span class="k">return</span> <span class="mi">0</span>
        <span class="n">lo</span><span class="p">,</span> <span class="n">hi</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nf">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span>
        <span class="k">while</span> <span class="n">lo</span> <span class="o">&lt;</span> <span class="n">hi</span><span class="p">:</span>
            <span class="n">mid</span> <span class="o">=</span> <span class="n">lo</span> <span class="o">+</span> <span class="p">(</span><span class="n">hi</span> <span class="o">-</span> <span class="n">lo</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span>
            <span class="k">if</span> <span class="n">nums</span><span class="p">[</span><span class="n">mid</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">target</span><span class="p">:</span>
                <span class="n">lo</span> <span class="o">=</span> <span class="n">mid</span><span class="o">+</span><span class="mi">1</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">hi</span> <span class="o">=</span> <span class="n">mid</span>
        <span class="k">if</span> <span class="n">lo</span> <span class="o">&lt;</span> <span class="nf">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span> <span class="ow">and</span> <span class="n">nums</span><span class="p">[</span><span class="n">lo</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="n">target</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">lo</span>
        <span class="k">return</span> <span class="n">lo</span><span class="o">+</span><span class="mi">1</span>
</code></pre></div></div>

<h3 id="36有效的数独"><a href="https://leetcode-cn.com/problems/valid-sudoku/description/">36.有效的数独</a></h3>

<p>判断一个9x9的数独是否有效，注意给定的数独序列只包含数字1-9和字符'.'，一个有效的数独不一定是可解的。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">isValidSudoku</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">board</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">
        :type board: List[List[str]]
        :rtype: bool
        </span><span class="sh">"""</span>
        <span class="k">def</span> <span class="nf">ok</span><span class="p">(</span><span class="n">T</span><span class="p">):</span>
            <span class="n">s</span> <span class="o">=</span> <span class="nf">set</span><span class="p">()</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">T</span><span class="p">:</span>
                <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="sh">'</span><span class="s">.</span><span class="sh">'</span><span class="p">:</span> <span class="k">continue</span>
                <span class="k">if</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">s</span><span class="p">:</span> <span class="k">return</span> <span class="bp">False</span>
                <span class="n">s</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
            <span class="k">return</span> <span class="bp">True</span>
        
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">9</span><span class="p">):</span>
            <span class="n">t</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">9</span><span class="p">):</span>
                <span class="n">t</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">board</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">])</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="nf">ok</span><span class="p">(</span><span class="n">t</span><span class="p">):</span>
                <span class="k">return</span> <span class="bp">False</span>

        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">9</span><span class="p">):</span>
            <span class="n">t</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">9</span><span class="p">):</span>
                <span class="n">t</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">board</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">])</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="nf">ok</span><span class="p">(</span><span class="n">t</span><span class="p">):</span>
                <span class="k">return</span> <span class="bp">False</span>
            
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">3</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">3</span><span class="p">):</span>
                <span class="n">t</span> <span class="o">=</span> <span class="p">[]</span>
                <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">3</span><span class="p">):</span>
                    <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">3</span><span class="p">):</span>
                        <span class="n">t</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">board</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="n">x</span><span class="p">][</span><span class="n">j</span><span class="o">+</span><span class="n">y</span><span class="p">])</span>
                <span class="k">if</span> <span class="ow">not</span> <span class="nf">ok</span><span class="p">(</span><span class="n">t</span><span class="p">):</span>
                    <span class="k">return</span> <span class="bp">False</span>
        <span class="k">return</span> <span class="bp">True</span>
</code></pre></div></div>

<h3 id="37解数独"><a href="https://leetcode-cn.com/problems/sudoku-solver/description/">37.解数独</a></h3>

<p>给定一个只包含数字1-9和字符'.'的数独序列，其中'.'代表未确定的数字，解出该数独。输入保证有唯一解。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">solveSudoku</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">board</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">
        :type board: List[List[str]]
        :rtype: void Do not return anything, modify board in-place instead.
        </span><span class="sh">"""</span>
        
        <span class="k">def</span> <span class="nf">ok</span><span class="p">(</span><span class="n">T</span><span class="p">):</span>
            <span class="n">s</span> <span class="o">=</span> <span class="nf">set</span><span class="p">()</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">T</span><span class="p">:</span>
                <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="sh">'</span><span class="s">.</span><span class="sh">'</span><span class="p">:</span> <span class="k">continue</span>
                <span class="k">if</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">s</span><span class="p">:</span> <span class="k">return</span> <span class="bp">False</span>
                <span class="n">s</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
            <span class="k">return</span> <span class="bp">True</span>
        
        <span class="k">def</span> <span class="nf">checkH</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
            <span class="n">t</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">9</span><span class="p">):</span>
                <span class="n">t</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">board</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">i</span><span class="p">])</span>
            <span class="k">return</span> <span class="nf">ok</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>
        
        <span class="k">def</span> <span class="nf">checkV</span><span class="p">(</span><span class="n">y</span><span class="p">):</span>
            <span class="n">t</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">9</span><span class="p">):</span>
                <span class="n">t</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">board</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">y</span><span class="p">])</span>
            <span class="k">return</span> <span class="nf">ok</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>
        
        <span class="k">def</span> <span class="nf">checkB</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
            <span class="n">t</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">3</span><span class="p">):</span>
                <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">3</span><span class="p">):</span>
                    <span class="n">t</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">board</span><span class="p">[</span><span class="n">x</span><span class="o">+</span><span class="n">i</span><span class="p">][</span><span class="n">y</span><span class="o">+</span><span class="n">j</span><span class="p">])</span>
            <span class="k">return</span> <span class="nf">ok</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>
        
        <span class="k">def</span> <span class="nf">check</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
            <span class="k">return</span> <span class="nf">checkH</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="ow">and</span> <span class="nf">checkV</span><span class="p">(</span><span class="n">y</span><span class="p">)</span> <span class="ow">and</span> <span class="nf">checkB</span><span class="p">(</span><span class="n">x</span><span class="o">//</span><span class="mi">3</span><span class="o">*</span><span class="mi">3</span><span class="p">,</span> <span class="n">y</span><span class="o">//</span><span class="mi">3</span><span class="o">*</span><span class="mi">3</span><span class="p">)</span>

        <span class="k">def</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">81</span><span class="p">:</span> <span class="k">return</span> <span class="bp">True</span>
            <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">n</span><span class="o">//</span><span class="mi">9</span><span class="p">,</span> <span class="n">n</span><span class="o">%</span><span class="mi">9</span>
            <span class="k">if</span> <span class="n">board</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">!=</span> <span class="sh">'</span><span class="s">.</span><span class="sh">'</span><span class="p">:</span>
                <span class="k">return</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">10</span><span class="p">):</span>
                <span class="n">board</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">=</span> <span class="nf">str</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
                <span class="k">if</span> <span class="nf">check</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
                    <span class="k">if</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
                        <span class="k">return</span> <span class="bp">True</span>
            <span class="n">board</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">=</span> <span class="sh">'</span><span class="s">.</span><span class="sh">'</span>
            <span class="k">return</span> <span class="bp">False</span>
        
        <span class="nf">dfs</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="38报数"><a href="https://leetcode-cn.com/problems/count-and-say/description/">38.报数</a></h3>

<p>报数序列是指一个整数序列，按照其中的整数的顺序进行报数，得到下一个数。给定一个正整数n，输出报数序列的第n项。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">countAndSay</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">
        :type n: int
        :rtype: str
        </span><span class="sh">"""</span>
        <span class="n">ans</span> <span class="o">=</span> <span class="sh">'</span><span class="s">1</span><span class="sh">'</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
            <span class="n">tmp</span> <span class="o">=</span> <span class="sh">''</span>
            <span class="n">idx</span> <span class="o">=</span> <span class="mi">0</span>
            <span class="k">while</span> <span class="n">idx</span> <span class="o">&lt;</span> <span class="nf">len</span><span class="p">(</span><span class="n">ans</span><span class="p">):</span>
                <span class="n">tag</span> <span class="o">=</span> <span class="n">ans</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span>
                <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span>
                <span class="k">while</span> <span class="n">idx</span> <span class="o">&lt;</span> <span class="nf">len</span><span class="p">(</span><span class="n">ans</span><span class="p">)</span> <span class="ow">and</span> <span class="n">ans</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="o">==</span> <span class="n">tag</span><span class="p">:</span>
                    <span class="n">idx</span> <span class="o">+=</span> <span class="mi">1</span>
                    <span class="n">cnt</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="n">tmp</span> <span class="o">+=</span> <span class="nf">str</span><span class="p">(</span><span class="n">cnt</span><span class="p">)</span> <span class="o">+</span> <span class="n">tag</span>
            <span class="n">ans</span> <span class="o">=</span> <span class="n">tmp</span>
        <span class="k">return</span> <span class="n">ans</span>
</code></pre></div></div>

<h3 id="39组合求和"><a href="https://leetcode-cn.com/problems/combination-sum/description/">39.组合求和</a></h3>

<p>给定一个无重复元素的数组candidates和一个目标数target，找出candidates中所有可以使数字和为target的组合，注意candidates中的数字可以无限制重复被选取，保证candidates中的数以及target都是正整数。输出结果要求不能包含重复的组合。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">combinationSum</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">candidates</span><span class="p">,</span> <span class="n">target</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">
        :type candidates: List[int]
        :type target: int
        :rtype: List[List[int]]
        </span><span class="sh">"""</span>
        
        <span class="k">def</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">idx</span><span class="p">,</span> <span class="n">cur</span><span class="p">,</span> <span class="n">tmp</span><span class="p">,</span> <span class="n">ans</span><span class="p">,</span> <span class="n">candidates</span><span class="p">,</span> <span class="n">target</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">cur</span> <span class="o">&gt;</span> <span class="n">target</span><span class="p">:</span> <span class="k">return</span>
            <span class="k">if</span> <span class="n">cur</span> <span class="o">==</span> <span class="n">target</span><span class="p">:</span>
                <span class="n">ans</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">tmp</span><span class="p">.</span><span class="nf">copy</span><span class="p">())</span>
                <span class="k">return</span>
            <span class="k">if</span> <span class="n">idx</span> <span class="o">==</span> <span class="nf">len</span><span class="p">(</span><span class="n">candidates</span><span class="p">):</span>
                <span class="k">return</span>
            <span class="nf">dfs</span><span class="p">(</span><span class="n">idx</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">cur</span><span class="p">,</span> <span class="n">tmp</span><span class="o">+</span><span class="p">[</span><span class="n">candidates</span><span class="p">[</span><span class="n">idx</span><span class="p">]],</span> <span class="n">ans</span><span class="p">,</span> <span class="n">candidates</span><span class="p">,</span> <span class="n">target</span><span class="p">)</span>
            <span class="nf">dfs</span><span class="p">(</span><span class="n">idx</span><span class="p">,</span> <span class="n">cur</span><span class="o">+</span><span class="n">candidates</span><span class="p">[</span><span class="n">idx</span><span class="p">],</span> <span class="n">tmp</span><span class="p">,</span> <span class="n">ans</span><span class="p">,</span> <span class="n">candidates</span><span class="p">,</span> <span class="n">target</span><span class="p">)</span>
        
        <span class="n">ans</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="nf">dfs</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="p">[],</span> <span class="n">ans</span><span class="p">,</span> <span class="n">candidates</span><span class="p">,</span> <span class="n">target</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">ans</span>
</code></pre></div></div>

<h3 id="40组合总和ii"><a href="https://leetcode-cn.com/problems/combination-sum-ii/description/">40.组合总和II</a></h3>

<p>给定一个数组candidates和一个目标数target，找出candidates中所有可以使数字和为target的组合，注意candidates中的数字在每个组合中最多只能使用一次，保证candidates中的数以及target都是正整数，要求解集不能包含重复的组合。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">combinationSum2</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">candidates</span><span class="p">,</span> <span class="n">target</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">
        :type candidates: List[int]
        :type target: int
        :rtype: List[List[int]]
        </span><span class="sh">"""</span>
        
        <span class="k">def</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">idx</span><span class="p">,</span> <span class="n">cur</span><span class="p">,</span> <span class="n">tmp</span><span class="p">,</span> <span class="n">ans</span><span class="p">,</span> <span class="n">candidates</span><span class="p">,</span> <span class="n">target</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">cur</span> <span class="o">&gt;</span> <span class="n">target</span><span class="p">:</span> <span class="k">return</span>
            <span class="k">if</span> <span class="n">cur</span> <span class="o">==</span> <span class="n">target</span><span class="p">:</span>
                <span class="n">ans</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="nf">tuple</span><span class="p">(</span><span class="n">tmp</span><span class="p">))</span>
                <span class="k">return</span>
            <span class="k">if</span> <span class="n">idx</span> <span class="o">==</span> <span class="nf">len</span><span class="p">(</span><span class="n">candidates</span><span class="p">):</span>
                <span class="k">return</span>
            <span class="nf">dfs</span><span class="p">(</span><span class="n">idx</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">cur</span><span class="p">,</span> <span class="n">tmp</span><span class="p">,</span> <span class="n">ans</span><span class="p">,</span> <span class="n">candidates</span><span class="p">,</span> <span class="n">target</span><span class="p">)</span>
            <span class="nf">dfs</span><span class="p">(</span><span class="n">idx</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">cur</span><span class="o">+</span><span class="n">candidates</span><span class="p">[</span><span class="n">idx</span><span class="p">],</span> <span class="n">tmp</span><span class="o">+</span><span class="p">[</span><span class="n">candidates</span><span class="p">[</span><span class="n">idx</span><span class="p">]],</span> <span class="n">ans</span><span class="p">,</span> <span class="n">candidates</span><span class="p">,</span> <span class="n">target</span><span class="p">)</span>

        <span class="n">ans</span> <span class="o">=</span> <span class="nf">set</span><span class="p">()</span>
        <span class="n">candidates</span><span class="p">.</span><span class="nf">sort</span><span class="p">()</span>
        <span class="nf">dfs</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="p">[],</span> <span class="n">ans</span><span class="p">,</span> <span class="n">candidates</span><span class="p">,</span> <span class="n">target</span><span class="p">)</span>
        <span class="k">return</span> <span class="nf">sorted</span><span class="p">(</span><span class="nf">list</span><span class="p">(</span><span class="n">ans</span><span class="p">))</span>
</code></pre></div></div>]]></content><author><name>chenfy27</name></author><category term="LeetCode" /><summary type="html"><![CDATA[31.下一个排列]]></summary></entry><entry><title type="html">leetcode 21-30</title><link href="http://0.0.0.0:4000/blog/2018/07/01/leetcode-21-30.html" rel="alternate" type="text/html" title="leetcode 21-30" /><published>2018-07-01T00:00:00+08:00</published><updated>2018-07-01T00:00:00+08:00</updated><id>http://0.0.0.0:4000/blog/2018/07/01/leetcode-21-30</id><content type="html" xml:base="http://0.0.0.0:4000/blog/2018/07/01/leetcode-21-30.html"><![CDATA[<h3 id="21合并两个有序链表"><a href="https://leetcode-cn.com/problems/merge-two-sorted-lists/description/">21.合并两个有序链表</a></h3>

<p>将两个有序链表合并为一个新的有序链表并返回。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None
</span>
<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">mergeTwoLists</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">l1</span><span class="p">,</span> <span class="n">l2</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        </span><span class="sh">"""</span>
        <span class="n">ans</span> <span class="o">=</span> <span class="nc">ListNode</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
        <span class="n">tmp</span> <span class="o">=</span> <span class="n">ans</span>
        <span class="k">while</span> <span class="n">l1</span> <span class="ow">and</span> <span class="n">l2</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">l1</span><span class="p">.</span><span class="n">val</span> <span class="o">&lt;=</span> <span class="n">l2</span><span class="p">.</span><span class="n">val</span><span class="p">:</span>
                <span class="n">tmp</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">l1</span>
                <span class="n">tmp</span> <span class="o">=</span> <span class="n">l1</span>
                <span class="n">l1</span> <span class="o">=</span> <span class="n">l1</span><span class="p">.</span><span class="nb">next</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">tmp</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">l2</span>
                <span class="n">tmp</span> <span class="o">=</span> <span class="n">l2</span>
                <span class="n">l2</span> <span class="o">=</span> <span class="n">l2</span><span class="p">.</span><span class="nb">next</span>
        <span class="k">if</span> <span class="n">l1</span><span class="p">:</span> <span class="n">tmp</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">l1</span>
        <span class="k">if</span> <span class="n">l2</span><span class="p">:</span> <span class="n">tmp</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">l2</span>
        <span class="k">return</span> <span class="n">ans</span><span class="p">.</span><span class="nb">next</span>
</code></pre></div></div>

<h3 id="22括号生成"><a href="https://leetcode-cn.com/problems/generate-parentheses/description/">22.括号生成</a></h3>

<p>给出n代表生成括号的对数，要求生成所有可能并且有效的括号组合。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">generateParenthesis</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">
        :type n: int
        :rtype: List[str]
        </span><span class="sh">"""</span>

        <span class="k">def</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">L</span><span class="p">,</span> <span class="n">R</span><span class="p">,</span> <span class="n">s</span><span class="p">,</span> <span class="n">ans</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">L</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="ow">or</span> <span class="n">R</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="ow">or</span> <span class="n">L</span> <span class="o">&gt;</span> <span class="n">R</span><span class="p">:</span>
                <span class="k">return</span>
            <span class="k">if</span> <span class="n">L</span> <span class="o">==</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">R</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                <span class="n">ans</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
                <span class="k">return</span>
            <span class="nf">dfs</span><span class="p">(</span><span class="n">L</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">R</span><span class="p">,</span> <span class="n">s</span><span class="o">+</span><span class="sh">'</span><span class="s">(</span><span class="sh">'</span><span class="p">,</span> <span class="n">ans</span><span class="p">)</span>
            <span class="nf">dfs</span><span class="p">(</span><span class="n">L</span><span class="p">,</span> <span class="n">R</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">s</span><span class="o">+</span><span class="sh">'</span><span class="s">)</span><span class="sh">'</span><span class="p">,</span> <span class="n">ans</span><span class="p">)</span>

        <span class="n">ans</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="nf">dfs</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="sh">''</span><span class="p">,</span> <span class="n">ans</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">ans</span>
</code></pre></div></div>

<h3 id="23合并k个排序链表"><a href="https://leetcode-cn.com/problems/merge-k-sorted-lists/description/">23.合并K个排序链表</a></h3>

<p>合并K个排序链表，返回合并后的排序链表。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None
</span>
<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">mergeKLists</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">lists</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">
        :type lists: List[ListNode]
        :rtype: ListNode
        </span><span class="sh">"""</span>

        <span class="k">def</span> <span class="nf">merge</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">A</span><span class="p">,</span> <span class="n">B</span><span class="p">):</span>
            <span class="n">X</span> <span class="o">=</span> <span class="nc">ListNode</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
            <span class="n">t</span> <span class="o">=</span> <span class="n">X</span>
            <span class="k">while</span> <span class="n">A</span> <span class="ow">and</span> <span class="n">B</span><span class="p">:</span>
                <span class="k">if</span> <span class="n">A</span><span class="p">.</span><span class="n">val</span> <span class="o">&lt;=</span> <span class="n">B</span><span class="p">.</span><span class="n">val</span><span class="p">:</span>
                    <span class="n">t</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">A</span>
                    <span class="n">t</span> <span class="o">=</span> <span class="n">A</span>
                    <span class="n">A</span> <span class="o">=</span> <span class="n">A</span><span class="p">.</span><span class="nb">next</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="n">t</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">B</span>
                    <span class="n">t</span> <span class="o">=</span> <span class="n">B</span>
                    <span class="n">B</span> <span class="o">=</span> <span class="n">B</span><span class="p">.</span><span class="nb">next</span>
            <span class="k">if</span> <span class="n">A</span><span class="p">:</span> <span class="n">t</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">A</span>
            <span class="k">if</span> <span class="n">B</span><span class="p">:</span> <span class="n">t</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">B</span>
            <span class="k">return</span> <span class="n">X</span><span class="p">.</span><span class="nb">next</span>

        <span class="n">ans</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">lists</span><span class="p">:</span> <span class="k">return</span> <span class="n">ans</span>
        <span class="k">while</span> <span class="nf">len</span><span class="p">(</span><span class="n">lists</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nf">len</span><span class="p">(</span><span class="n">lists</span><span class="p">),</span> <span class="mi">2</span><span class="p">):</span>
                <span class="n">j</span> <span class="o">=</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span>
                <span class="k">if</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="nf">len</span><span class="p">(</span><span class="n">lists</span><span class="p">):</span>
                    <span class="n">t</span> <span class="o">=</span> <span class="nf">merge</span><span class="p">(</span><span class="n">lists</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">lists</span><span class="p">[</span><span class="n">j</span><span class="p">])</span>
                    <span class="n">ans</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="n">ans</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">lists</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
            <span class="n">lists</span> <span class="o">=</span> <span class="n">ans</span>
            <span class="n">ans</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">return</span> <span class="n">lists</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</code></pre></div></div>

<h3 id="24两两交换链表中的节点"><a href="https://leetcode-cn.com/problems/swap-nodes-in-pairs/description/">24.两两交换链表中的节点</a></h3>

<p>给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None
</span>
<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">swapPairs</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">head</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">
        :type head: ListNode
        :rtype: ListNode
        </span><span class="sh">"""</span>
        <span class="n">ans</span> <span class="o">=</span> <span class="nc">ListNode</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
        <span class="n">tmp</span> <span class="o">=</span> <span class="n">ans</span>
        <span class="n">stk</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">while</span> <span class="n">head</span><span class="p">:</span>
            <span class="n">stk</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">head</span><span class="p">)</span>
            <span class="n">head</span> <span class="o">=</span> <span class="n">head</span><span class="p">.</span><span class="nb">next</span>
            <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">stk</span><span class="p">)</span> <span class="o">==</span> <span class="mi">2</span><span class="p">:</span>
                <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">2</span><span class="p">):</span>
                    <span class="n">t</span> <span class="o">=</span> <span class="n">stk</span><span class="p">.</span><span class="nf">pop</span><span class="p">()</span>
                    <span class="n">tmp</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">t</span>
                    <span class="n">tmp</span> <span class="o">=</span> <span class="n">t</span>
        <span class="k">while</span> <span class="n">stk</span><span class="p">:</span>
            <span class="n">t</span> <span class="o">=</span> <span class="n">stk</span><span class="p">.</span><span class="nf">pop</span><span class="p">()</span>
            <span class="n">tmp</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">t</span>
            <span class="n">tmp</span> <span class="o">=</span> <span class="n">t</span>
        <span class="n">tmp</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="k">return</span> <span class="n">ans</span><span class="p">.</span><span class="nb">next</span>
</code></pre></div></div>

<h3 id="25k个一组翻转链表"><a href="https://leetcode-cn.com/problems/reverse-nodes-in-k-group/description/">25.K个一组翻转链表</a></h3>

<p>给出一个链表，每K个节点一组进行翻转，并返回翻转后的链表。K为正整数，它的值不超过链表长度。如果节点数不是K的倍数，那么最后整余节点保持原来的顺序。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None
</span>
<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">reverseKGroup</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">head</span><span class="p">,</span> <span class="n">k</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">
        :type head: ListNode
        :type k: int
        :rtype: ListNode
        </span><span class="sh">"""</span>
        <span class="n">ans</span> <span class="o">=</span> <span class="nc">ListNode</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
        <span class="n">tmp</span> <span class="o">=</span> <span class="n">ans</span>
        <span class="n">stk</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">while</span> <span class="n">head</span><span class="p">:</span>
            <span class="n">stk</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">head</span><span class="p">)</span>
            <span class="n">head</span> <span class="o">=</span> <span class="n">head</span><span class="p">.</span><span class="nb">next</span>
            <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">stk</span><span class="p">)</span> <span class="o">==</span> <span class="n">k</span><span class="p">:</span>
                <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">k</span><span class="p">):</span>
                    <span class="n">t</span> <span class="o">=</span> <span class="n">stk</span><span class="p">.</span><span class="nf">pop</span><span class="p">()</span>
                    <span class="n">tmp</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">t</span>
                    <span class="n">tmp</span> <span class="o">=</span> <span class="n">t</span>
        <span class="k">while</span> <span class="n">stk</span><span class="p">:</span>
            <span class="n">t</span> <span class="o">=</span> <span class="n">stk</span><span class="p">.</span><span class="nf">pop</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
            <span class="n">tmp</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">t</span>
            <span class="n">tmp</span> <span class="o">=</span> <span class="n">t</span>
        <span class="n">tmp</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="k">return</span> <span class="n">ans</span><span class="p">.</span><span class="nb">next</span>
</code></pre></div></div>

<h3 id="26删除排序数组中的重复项"><a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/description/">26.删除排序数组中的重复项</a></h3>

<p>给定一个排序数组，原地删除重复出现的元素，返回新数组的长度。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">removeDuplicates</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">
        :type nums: List[int]
        :rtype: int
        </span><span class="sh">"""</span>
        <span class="n">i</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
        <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">while</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="nf">len</span><span class="p">(</span><span class="n">nums</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="ow">or</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="n">nums</span><span class="p">[</span><span class="n">j</span><span class="p">]:</span>
                <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">nums</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>
            <span class="n">j</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">return</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span>
</code></pre></div></div>

<h3 id="27移除元素"><a href="https://leetcode-cn.com/problems/remove-element/description/">27.移除元素</a></h3>

<p>给定一个数组nums和一个值val，原地移除所有数值等于val的元素，返回新数组的长度。注意，元素的顺序可以改变，不需要考虑数组中超出新长度后面的元素。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">removeElement</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">,</span> <span class="n">val</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">
        :type nums: List[int]
        :type val: int
        :rtype: int
        </span><span class="sh">"""</span>
        <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nf">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span>
        <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">j</span><span class="p">:</span>
            <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">j</span> <span class="ow">and</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="n">val</span><span class="p">:</span>
                <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">j</span> <span class="ow">and</span> <span class="n">nums</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="n">val</span><span class="p">:</span>
                <span class="n">j</span> <span class="o">-=</span> <span class="mi">1</span>
                <span class="n">k</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="k">if</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">j</span><span class="p">:</span>
                <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">nums</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">nums</span><span class="p">[</span><span class="n">j</span><span class="p">],</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
                <span class="n">k</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="n">j</span> <span class="o">-=</span> <span class="mi">1</span>
        <span class="k">return</span> <span class="nf">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span><span class="o">-</span><span class="n">k</span>
</code></pre></div></div>

<h3 id="28实现strstr"><a href="https://leetcode-cn.com/problems/implement-strstr/description/">28.实现strstr()</a></h3>

<p>给定一个haystack字符串和一个needle字符串，在haystack中找出第一次出现needle的位置，如不存在则返回-1。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">strStr</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">haystack</span><span class="p">,</span> <span class="n">needle</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">
        :type haystack: str
        :type needle: str
        :rtype: int
        </span><span class="sh">"""</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">idx</span> <span class="o">=</span> <span class="n">haystack</span><span class="p">.</span><span class="nf">index</span><span class="p">(</span><span class="n">needle</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">ValueError</span><span class="p">:</span>
            <span class="n">idx</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
        <span class="k">return</span> <span class="n">idx</span>
</code></pre></div></div>

<h3 id="29两数相除"><a href="https://leetcode-cn.com/problems/divide-two-integers/description/">29.两数相除</a></h3>

<p>给定两个32位有符号的整数，返回它们的商，保证除数不为0。如果溢出，则返回最大值。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">divide</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">dividend</span><span class="p">,</span> <span class="n">divisor</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">
        :type dividend: int
        :type divisor: int
        :rtype: int
        </span><span class="sh">"""</span>
        <span class="n">ret</span> <span class="o">=</span> <span class="nf">abs</span><span class="p">(</span><span class="n">dividend</span><span class="p">)</span> <span class="o">//</span> <span class="nf">abs</span><span class="p">(</span><span class="n">divisor</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">dividend</span> <span class="o">*</span> <span class="n">divisor</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
            <span class="n">ret</span> <span class="o">=</span> <span class="o">-</span><span class="n">ret</span>
        <span class="n">ret</span> <span class="o">=</span> <span class="nf">min</span><span class="p">(</span><span class="n">ret</span><span class="p">,</span> <span class="mi">2</span><span class="o">**</span><span class="mi">31</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">ret</span>
</code></pre></div></div>

<h3 id="30与所有单词相关联的字串"><a href="https://leetcode-cn.com/problems/substring-with-concatenation-of-all-words/description/">30.与所有单词相关联的字串</a></h3>

<p>给定一个字符串s和一些长度相同的单词words，在s中找出可以恰好串联words中所有单词的子串的起始位置。注意子串要与words中的单词完全匹配，中间不能有其他字符，但顺序不做要求。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">findSubstring</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">s</span><span class="p">,</span> <span class="n">words</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">
        :type s: str
        :type words: List[str]
        :rtype: List[int]
        </span><span class="sh">"""</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">words</span><span class="p">:</span> <span class="k">return</span> <span class="p">[]</span>
        <span class="n">std</span> <span class="o">=</span> <span class="nf">sorted</span><span class="p">(</span><span class="n">words</span><span class="p">)</span>
        <span class="n">siz</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">words</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
        <span class="n">cnt</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">words</span><span class="p">)</span>
        <span class="n">ans</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nf">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span><span class="o">-</span><span class="n">siz</span><span class="o">*</span><span class="n">cnt</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
            <span class="n">tmp</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">i</span><span class="o">+</span><span class="n">siz</span><span class="o">*</span><span class="n">cnt</span><span class="p">,</span> <span class="n">siz</span><span class="p">):</span>
                <span class="n">tmp</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">j</span><span class="p">:</span><span class="n">j</span><span class="o">+</span><span class="n">siz</span><span class="p">])</span>
            <span class="n">tmp</span><span class="p">.</span><span class="nf">sort</span><span class="p">()</span>
            <span class="k">if</span> <span class="n">tmp</span> <span class="o">==</span> <span class="n">std</span><span class="p">:</span>
                <span class="n">ans</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">ans</span>
</code></pre></div></div>]]></content><author><name>chenfy27</name></author><category term="LeetCode" /><summary type="html"><![CDATA[21.合并两个有序链表]]></summary></entry><entry><title type="html">leetcode 11-20</title><link href="http://0.0.0.0:4000/blog/2018/06/29/leetcode-11-20.html" rel="alternate" type="text/html" title="leetcode 11-20" /><published>2018-06-29T00:00:00+08:00</published><updated>2018-06-29T00:00:00+08:00</updated><id>http://0.0.0.0:4000/blog/2018/06/29/leetcode-11-20</id><content type="html" xml:base="http://0.0.0.0:4000/blog/2018/06/29/leetcode-11-20.html"><![CDATA[<h3 id="11盛水最多的容器"><a href="https://leetcode-cn.com/problems/container-with-most-water/description/">11.盛水最多的容器</a></h3>

<p>给定n个非负整数a[n]，每个数代表一个点(i,a[i])，画n条垂线，每条垂线的端点分别为(i,a[i])和(i,0)，选两条线，使它们与x轴构成的容器可以容纳最多的水。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">maxArea</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">height</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">
        :type height: List[int]
        :rtype: int
        </span><span class="sh">"""</span>
        <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">i</span><span class="p">,</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nf">len</span><span class="p">(</span><span class="n">height</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span>
        <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">j</span><span class="p">:</span>
            <span class="n">ans</span> <span class="o">=</span> <span class="nf">max</span><span class="p">(</span><span class="n">ans</span><span class="p">,</span> <span class="p">(</span><span class="n">j</span><span class="o">-</span><span class="n">i</span><span class="p">)</span><span class="o">*</span><span class="nf">min</span><span class="p">(</span><span class="n">height</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">height</span><span class="p">[</span><span class="n">j</span><span class="p">]))</span>
            <span class="k">if</span> <span class="n">height</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">height</span><span class="p">[</span><span class="n">j</span><span class="p">]:</span>
                <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">j</span> <span class="o">-=</span> <span class="mi">1</span>
        <span class="k">return</span> <span class="n">ans</span>
</code></pre></div></div>

<h3 id="12整数转罗马数字"><a href="https://leetcode-cn.com/problems/integer-to-roman/description/">12.整数转罗马数字</a></h3>

<p>在罗马数字表示法中，字母"IVXLCDM"分别代表1, 5, 10, 50, 100, 500, 1000。给定一个1〜3999的整数，将其转成罗马数字。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">intToRoman</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">num</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">
        :type num: int
        :rtype: str
        </span><span class="sh">"""</span>
        <span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">90</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">400</span><span class="p">,</span> <span class="mi">500</span><span class="p">,</span> <span class="mi">900</span><span class="p">,</span> <span class="mi">1000</span><span class="p">]</span>
        <span class="n">b</span> <span class="o">=</span> <span class="p">[</span><span class="sh">'</span><span class="s">I</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">IV</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">V</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">IX</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">X</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">XL</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">L</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">XC</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">C</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">CD</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">D</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">CM</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">M</span><span class="sh">'</span><span class="p">]</span>
        <span class="n">ans</span> <span class="o">=</span> <span class="sh">''</span>
        <span class="n">x</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span>
        <span class="k">while</span> <span class="n">num</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">num</span> <span class="o">&gt;=</span> <span class="n">a</span><span class="p">[</span><span class="n">x</span><span class="p">]:</span>
                <span class="n">ans</span> <span class="o">+=</span> <span class="n">b</span><span class="p">[</span><span class="n">x</span><span class="p">]</span>
                <span class="n">num</span> <span class="o">-=</span> <span class="n">a</span><span class="p">[</span><span class="n">x</span><span class="p">]</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">x</span> <span class="o">-=</span> <span class="mi">1</span>
        <span class="k">return</span> <span class="n">ans</span>
</code></pre></div></div>

<h3 id="13罗马数字转整数"><a href="https://leetcode-cn.com/problems/roman-to-integer/description/">13.罗马数字转整数</a></h3>

<p>给定一个范围在1〜3999的罗马数字，将其转换成整数。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">romanToInt</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">s</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">
        :type s: str
        :rtype: int
        </span><span class="sh">"""</span>
        <span class="n">a</span> <span class="o">=</span> <span class="p">{</span><span class="sh">'</span><span class="s">I</span><span class="sh">'</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span> <span class="sh">'</span><span class="s">V</span><span class="sh">'</span><span class="p">:</span><span class="mi">5</span><span class="p">,</span> <span class="sh">'</span><span class="s">X</span><span class="sh">'</span><span class="p">:</span><span class="mi">10</span><span class="p">,</span> <span class="sh">'</span><span class="s">L</span><span class="sh">'</span><span class="p">:</span><span class="mi">50</span><span class="p">,</span> <span class="sh">'</span><span class="s">C</span><span class="sh">'</span><span class="p">:</span><span class="mi">100</span><span class="p">,</span> <span class="sh">'</span><span class="s">D</span><span class="sh">'</span><span class="p">:</span><span class="mi">500</span><span class="p">,</span> <span class="sh">'</span><span class="s">M</span><span class="sh">'</span><span class="p">:</span><span class="mi">1000</span><span class="p">}</span>
        <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">s</span><span class="p">)):</span>
            <span class="k">if</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span> <span class="o">&lt;</span> <span class="nf">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="ow">and</span> <span class="n">a</span><span class="p">[</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span> <span class="o">&lt;</span> <span class="n">a</span><span class="p">[</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]]:</span>
                <span class="n">ans</span> <span class="o">-=</span> <span class="n">a</span><span class="p">[</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">ans</span> <span class="o">+=</span> <span class="n">a</span><span class="p">[</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span>
        <span class="k">return</span> <span class="n">ans</span>
</code></pre></div></div>

<h3 id="14最长公共前缀"><a href="https://leetcode-cn.com/problems/longest-common-prefix/description/">14.最长公共前缀</a></h3>

<p>输入一个字符串数组，求所有字符串的最长公共前缀。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">longestCommonPrefix</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">strs</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">
        :type strs: List[str]
        :rtype: str
        </span><span class="sh">"""</span>

        <span class="k">def</span> <span class="nf">prefix</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
            <span class="n">ret</span> <span class="o">=</span> <span class="sh">''</span>
            <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span> <span class="ow">in</span> <span class="nf">zip</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
                <span class="k">if</span> <span class="n">i</span> <span class="o">!=</span> <span class="n">j</span><span class="p">:</span>
                    <span class="k">break</span>
                <span class="n">ret</span> <span class="o">+=</span> <span class="n">i</span>
            <span class="k">return</span> <span class="n">ret</span>

        <span class="n">ans</span> <span class="o">=</span> <span class="sh">''</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">strs</span><span class="p">)):</span>
            <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                <span class="n">ans</span> <span class="o">=</span> <span class="n">strs</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">ans</span> <span class="o">=</span> <span class="nf">prefix</span><span class="p">(</span><span class="n">ans</span><span class="p">,</span> <span class="n">strs</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
        <span class="k">return</span> <span class="n">ans</span>
</code></pre></div></div>

<h3 id="15三数之和"><a href="https://leetcode-cn.com/problems/3sum/description/">15.三数之和</a></h3>

<p>给定一个包含n个整数的数组nums[n]，判断nums中是否存在三个元素a,b,c使得a+b+c=0？找出所有满足条件且不重复的三元组。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">threeSum</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">
        :type nums: List[int]
        :rtype: List[List[int]]
        </span><span class="sh">"""</span>
        <span class="n">nums</span><span class="p">.</span><span class="nf">sort</span><span class="p">()</span>
        <span class="n">ans</span> <span class="o">=</span> <span class="nf">set</span><span class="p">()</span>
        <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">a</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">nums</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">i</span> <span class="ow">and</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]:</span>
                <span class="k">continue</span>
            <span class="n">L</span> <span class="o">=</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span>
            <span class="n">R</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span>
            <span class="k">while</span> <span class="n">L</span> <span class="o">&lt;</span> <span class="n">R</span><span class="p">:</span>
                <span class="n">t</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">nums</span><span class="p">[</span><span class="n">L</span><span class="p">]</span> <span class="o">+</span> <span class="n">nums</span><span class="p">[</span><span class="n">R</span><span class="p">]</span>
                <span class="k">if</span> <span class="n">t</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
                    <span class="n">L</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="k">elif</span> <span class="n">t</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
                    <span class="n">R</span> <span class="o">-=</span> <span class="mi">1</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="n">ans</span><span class="p">.</span><span class="nf">add</span><span class="p">((</span><span class="n">a</span><span class="p">,</span> <span class="n">nums</span><span class="p">[</span><span class="n">L</span><span class="p">],</span> <span class="n">nums</span><span class="p">[</span><span class="n">R</span><span class="p">]))</span>
                    <span class="n">L</span> <span class="o">+=</span> <span class="mi">1</span>
                    <span class="n">R</span> <span class="o">-=</span> <span class="mi">1</span>
        <span class="k">return</span> <span class="nf">list</span><span class="p">(</span><span class="n">ans</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="16最接近的三数之和"><a href="https://leetcode-cn.com/problems/3sum-closest/description/">16.最接近的三数之和</a></h3>

<p>给定一个包括n个整数的数组nums和一个目标值target，找出nums中的三个整数，使得它们的和与target最接近，返回这三个数的和。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">threeSumClosest</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">,</span> <span class="n">target</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">
        :type nums: List[int]
        :type target: int
        :rtype: int
        </span><span class="sh">"""</span>
        <span class="n">nums</span><span class="p">.</span><span class="nf">sort</span><span class="p">()</span>
        <span class="n">ans</span> <span class="o">=</span> <span class="nf">sum</span><span class="p">(</span><span class="n">nums</span><span class="p">[:</span><span class="mi">3</span><span class="p">])</span>
        <span class="n">dif</span> <span class="o">=</span> <span class="nf">abs</span><span class="p">(</span><span class="n">target</span> <span class="o">-</span> <span class="n">ans</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">a</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">nums</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">i</span> <span class="ow">and</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="n">a</span><span class="p">:</span>
                <span class="k">continue</span>
            <span class="n">L</span> <span class="o">=</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span>
            <span class="n">R</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span>
            <span class="k">while</span> <span class="n">L</span> <span class="o">&lt;</span> <span class="n">R</span><span class="p">:</span>
                <span class="n">t</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">nums</span><span class="p">[</span><span class="n">L</span><span class="p">]</span> <span class="o">+</span> <span class="n">nums</span><span class="p">[</span><span class="n">R</span><span class="p">]</span>
                <span class="k">if</span> <span class="nf">abs</span><span class="p">(</span><span class="n">t</span><span class="o">-</span><span class="n">target</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">dif</span><span class="p">:</span>
                    <span class="n">dif</span> <span class="o">=</span> <span class="nf">abs</span><span class="p">(</span><span class="n">t</span><span class="o">-</span><span class="n">target</span><span class="p">)</span>
                    <span class="n">ans</span> <span class="o">=</span> <span class="n">t</span>
                <span class="k">if</span> <span class="n">t</span> <span class="o">&lt;</span> <span class="n">target</span><span class="p">:</span>
                    <span class="n">L</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="k">elif</span> <span class="n">t</span> <span class="o">&gt;</span> <span class="n">target</span><span class="p">:</span>
                    <span class="n">R</span> <span class="o">-=</span> <span class="mi">1</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="k">break</span>
        <span class="k">return</span> <span class="n">ans</span>
</code></pre></div></div>

<h3 id="17电话号码的字母组合"><a href="https://leetcode-cn.com/problems/letter-combinations-of-a-phone-number/description/">17.电话号码的字母组合</a></h3>

<p>在手机上数字2-9的键对应着字母a-z，给定一个仅包含数字2-9的字符串，返回所有它能表示的字母组合。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">letterCombinations</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">digits</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">
        :type digits: str
        :rtype: List[str]
        </span><span class="sh">"""</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">digits</span><span class="p">:</span>
            <span class="k">return</span> <span class="p">[]</span>
        <span class="n">ans</span> <span class="o">=</span> <span class="p">[</span><span class="sh">''</span><span class="p">]</span>
        <span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="sh">''</span><span class="p">,</span> <span class="sh">''</span><span class="p">,</span> <span class="sh">'</span><span class="s">abc</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">def</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">ghi</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">jkl</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">mno</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">pqrs</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">tuv</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">wxyz</span><span class="sh">'</span><span class="p">]</span>
        <span class="k">for</span> <span class="n">d</span> <span class="ow">in</span> <span class="n">digits</span><span class="p">:</span>
            <span class="n">ans</span> <span class="o">=</span> <span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="n">i</span> <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="n">ans</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">a</span><span class="p">[</span><span class="nf">int</span><span class="p">(</span><span class="n">d</span><span class="p">)]]</span>
        <span class="k">return</span> <span class="n">ans</span>
</code></pre></div></div>

<h3 id="18四数之和"><a href="https://leetcode-cn.com/problems/4sum/description/">18.四数之和</a></h3>

<p>给定一个包含n个整数的数组nums和一个目标值target，判断nums中是否存在四个元素a,b,c,d使得a+b+c+d=target，找出所有满足条件且不重复的四元组。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">fourSum</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">,</span> <span class="n">target</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">
        :type nums: List[int]
        :type target: int
        :rtype: List[List[int]]
        </span><span class="sh">"""</span>
        <span class="n">nums</span><span class="p">.</span><span class="nf">sort</span><span class="p">()</span>
        <span class="n">ans</span> <span class="o">=</span> <span class="nf">set</span><span class="p">()</span>
        <span class="k">for</span> <span class="n">a</span><span class="p">,</span> <span class="n">A</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">nums</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">a</span> <span class="ow">and</span> <span class="n">nums</span><span class="p">[</span><span class="n">a</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="n">A</span><span class="p">:</span>
                <span class="k">continue</span>
            <span class="k">for</span> <span class="n">b</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">a</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="nf">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)):</span>
                <span class="n">B</span> <span class="o">=</span> <span class="n">nums</span><span class="p">[</span><span class="n">b</span><span class="p">]</span>
                <span class="k">if</span> <span class="n">b</span><span class="o">-</span><span class="mi">1</span> <span class="o">&gt;</span> <span class="n">a</span> <span class="ow">and</span> <span class="n">nums</span><span class="p">[</span><span class="n">b</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="n">B</span><span class="p">:</span>
                    <span class="k">continue</span>
                <span class="n">L</span> <span class="o">=</span> <span class="n">b</span><span class="o">+</span><span class="mi">1</span>
                <span class="n">R</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span>
                <span class="k">while</span> <span class="n">L</span> <span class="o">&lt;</span> <span class="n">R</span><span class="p">:</span>
                    <span class="n">t</span> <span class="o">=</span> <span class="n">A</span><span class="o">+</span><span class="n">B</span><span class="o">+</span><span class="n">nums</span><span class="p">[</span><span class="n">L</span><span class="p">]</span><span class="o">+</span><span class="n">nums</span><span class="p">[</span><span class="n">R</span><span class="p">]</span>
                    <span class="k">if</span> <span class="n">t</span> <span class="o">&lt;</span> <span class="n">target</span><span class="p">:</span>
                        <span class="n">L</span> <span class="o">+=</span> <span class="mi">1</span>
                    <span class="k">elif</span> <span class="n">t</span> <span class="o">&gt;</span> <span class="n">target</span><span class="p">:</span>
                        <span class="n">R</span> <span class="o">-=</span> <span class="mi">1</span>
                    <span class="k">else</span><span class="p">:</span>
                        <span class="n">ans</span><span class="p">.</span><span class="nf">add</span><span class="p">((</span><span class="n">A</span><span class="p">,</span><span class="n">B</span><span class="p">,</span><span class="n">nums</span><span class="p">[</span><span class="n">L</span><span class="p">],</span><span class="n">nums</span><span class="p">[</span><span class="n">R</span><span class="p">]))</span>
                        <span class="n">L</span> <span class="o">+=</span> <span class="mi">1</span>
                        <span class="n">R</span> <span class="o">-=</span> <span class="mi">1</span>
        <span class="k">return</span> <span class="nf">list</span><span class="p">(</span><span class="n">ans</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="19删除链表的倒数第n个节点"><a href="https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/description/">19.删除链表的倒数第N个节点</a></h3>

<p>给定一个链表，删除倒数第n个节点，并返回链表的头结点，给定的n保证有效。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None
</span>
<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">removeNthFromEnd</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">head</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">
        :type head: ListNode
        :type n: int
        :rtype: ListNode
        </span><span class="sh">"""</span>
        <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span> <span class="n">head</span><span class="p">,</span> <span class="n">head</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
            <span class="n">c</span> <span class="o">=</span> <span class="n">c</span><span class="p">.</span><span class="nb">next</span>
        <span class="k">while</span> <span class="n">c</span><span class="p">:</span>
            <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span> <span class="o">=</span> <span class="n">b</span><span class="p">,</span> <span class="n">b</span><span class="p">.</span><span class="nb">next</span><span class="p">,</span> <span class="n">c</span><span class="p">.</span><span class="nb">next</span>
        <span class="k">if</span> <span class="n">a</span><span class="p">:</span>
            <span class="n">a</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">b</span><span class="p">.</span><span class="nb">next</span>
            <span class="k">return</span> <span class="n">head</span>
        <span class="k">return</span> <span class="n">b</span><span class="p">.</span><span class="nb">next</span>
</code></pre></div></div>

<h3 id="20有效的括号"><a href="https://leetcode-cn.com/problems/valid-parentheses/description/">20.有效的括号</a></h3>

<p>给定一个只包含大中小括号的字符串，判断字符串是否有效。注意空字符串有效。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">isValid</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">s</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">
        :type s: str
        :rtype: bool
        </span><span class="sh">"""</span>
        <span class="n">a</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">tag</span> <span class="o">=</span> <span class="p">{</span><span class="sh">'</span><span class="s">)</span><span class="sh">'</span><span class="p">:</span><span class="sh">'</span><span class="s">(</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">]</span><span class="sh">'</span><span class="p">:</span><span class="sh">'</span><span class="s">[</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">}</span><span class="sh">'</span><span class="p">:</span><span class="sh">'</span><span class="s">{</span><span class="sh">'</span><span class="p">}</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">s</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">i</span> <span class="ow">in</span> <span class="sh">'</span><span class="s">([{</span><span class="sh">'</span><span class="p">:</span>
                <span class="n">a</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">if</span> <span class="n">a</span> <span class="ow">and</span> <span class="n">a</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="n">tag</span><span class="p">[</span><span class="n">i</span><span class="p">]:</span>
                    <span class="n">a</span><span class="p">.</span><span class="nf">pop</span><span class="p">()</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="k">return</span> <span class="bp">False</span>
        <span class="k">return</span> <span class="nf">len</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span>
</code></pre></div></div>]]></content><author><name>chenfy27</name></author><category term="LeetCode" /><summary type="html"><![CDATA[11.盛水最多的容器]]></summary></entry><entry><title type="html">leetcode 1-10</title><link href="http://0.0.0.0:4000/blog/2018/06/26/leetcode-1-10.html" rel="alternate" type="text/html" title="leetcode 1-10" /><published>2018-06-26T00:00:00+08:00</published><updated>2018-06-26T00:00:00+08:00</updated><id>http://0.0.0.0:4000/blog/2018/06/26/leetcode-1-10</id><content type="html" xml:base="http://0.0.0.0:4000/blog/2018/06/26/leetcode-1-10.html"><![CDATA[<p>为熟悉python，这里选择用它来写LeetCode上的题目练手，在能通过的前提下尽可能地让代码简单清晰。</p>

<h3 id="1两数之和"><a href="https://leetcode-cn.com/problems/two-sum/description/">1.两数之和</a></h3>

<p>给定一个整数数组和一个目标值，找出数组中和为目标值的两个数，输入保证有唯一解。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">twoSum</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">,</span> <span class="n">target</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        </span><span class="sh">"""</span>
        <span class="n">ans</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">a</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)):</span>
            <span class="n">k</span> <span class="o">=</span> <span class="n">target</span> <span class="o">-</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
            <span class="k">if</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">a</span><span class="p">:</span>
                <span class="n">ans</span><span class="p">.</span><span class="nf">extend</span><span class="p">([</span><span class="n">a</span><span class="p">[</span><span class="n">k</span><span class="p">],</span> <span class="n">i</span><span class="p">])</span>
                <span class="k">break</span>
            <span class="n">a</span><span class="p">[</span><span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span> <span class="o">=</span> <span class="n">i</span>
        <span class="k">return</span> <span class="n">ans</span>
</code></pre></div></div>

<h3 id="2两数相加"><a href="https://leetcode-cn.com/problems/add-two-numbers/description/">2.两数相加</a></h3>

<p>给定两个非空链表来表示两个非负整数，位数按照逆序方式存储，每个节点存一位数字，将两数相加并按该表式法返回结果。注意，数字没有前导0。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None
</span>
<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">addTwoNumbers</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">l1</span><span class="p">,</span> <span class="n">l2</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        </span><span class="sh">"""</span>
        <span class="n">c</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">ans</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">while</span> <span class="n">l1</span> <span class="ow">or</span> <span class="n">l2</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">l1</span><span class="p">:</span>
                <span class="n">c</span> <span class="o">+=</span> <span class="n">l1</span><span class="p">.</span><span class="n">val</span>
                <span class="n">l1</span> <span class="o">=</span> <span class="n">l1</span><span class="p">.</span><span class="nb">next</span>
            <span class="k">if</span> <span class="n">l2</span><span class="p">:</span>
                <span class="n">c</span> <span class="o">+=</span> <span class="n">l2</span><span class="p">.</span><span class="n">val</span>
                <span class="n">l2</span> <span class="o">=</span> <span class="n">l2</span><span class="p">.</span><span class="nb">next</span>
            <span class="n">ans</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">t</span> <span class="o">%</span> <span class="mi">10</span><span class="p">)</span>
            <span class="n">c</span> <span class="o">=</span> <span class="n">c</span> <span class="o">//</span> <span class="mi">10</span>
        <span class="k">if</span> <span class="n">c</span><span class="p">:</span> <span class="n">ans</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>
        <span class="n">node</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">ans</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]:</span>
            <span class="n">t</span> <span class="o">=</span> <span class="nc">ListNode</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
            <span class="n">t</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">node</span>
            <span class="n">node</span> <span class="o">=</span> <span class="n">t</span>
        <span class="k">return</span> <span class="n">node</span>
</code></pre></div></div>

<h3 id="3无重复字符的最长子串"><a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/description/">3.无重复字符的最长子串</a></h3>

<p>给定一个字符串，找出不含有重复字符的最长子串的长度。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">lengthOfLongestSubstring</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">s</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">
        :type s: str
        :rtype: int
        </span><span class="sh">"""</span>
        <span class="n">d</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span>
        <span class="k">while</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="nf">len</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
            <span class="n">d</span><span class="p">[</span><span class="n">s</span><span class="p">[</span><span class="n">j</span><span class="p">]]</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">+</span> <span class="n">d</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">j</span><span class="p">],</span> <span class="mi">0</span><span class="p">)</span>
            <span class="k">while</span> <span class="n">d</span><span class="p">[</span><span class="n">s</span><span class="p">[</span><span class="n">j</span><span class="p">]]</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">:</span>
                <span class="n">d</span><span class="p">[</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span> <span class="o">-=</span> <span class="mi">1</span>
                <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="n">k</span> <span class="o">=</span> <span class="nf">max</span><span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">j</span><span class="o">-</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
            <span class="n">j</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">return</span> <span class="n">k</span>
</code></pre></div></div>

<h3 id="4两个排序数组的中位数"><a href="https://leetcode-cn.com/problems/median-of-two-sorted-arrays/description/">4.两个排序数组的中位数</a></h3>

<p>给定两个大小分别为m和n的有序数组nums1与nums2，求这两个有序数组合并后的中位数。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">findMedianSortedArrays</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">nums1</span><span class="p">,</span> <span class="n">nums2</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">
        :type nums1: List[int]
        :type nums2: List[int]
        :rtype: float
        </span><span class="sh">"""</span>
        <span class="n">nums</span> <span class="o">=</span> <span class="n">nums1</span> <span class="o">+</span> <span class="n">nums2</span>
        <span class="n">nums</span><span class="p">.</span><span class="nf">sort</span><span class="p">()</span>
        <span class="n">l</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span>
        <span class="nf">return </span><span class="p">(</span><span class="n">nums</span><span class="p">[(</span><span class="n">l</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">//</span><span class="mi">2</span><span class="p">]</span> <span class="o">+</span> <span class="n">nums</span><span class="p">[</span><span class="n">l</span><span class="o">//</span><span class="mi">2</span><span class="p">])</span> <span class="o">/</span> <span class="mi">2</span>
</code></pre></div></div>

<h3 id="5最长回文子串"><a href="https://leetcode-cn.com/problems/longest-palindromic-substring/description/">5.最长回文子串</a></h3>

<p>给定一个字符串s，找到s中任意一个最长的回文子串。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">longestPalindrome</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">s</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">
        :type s: str
        :rtype: str
        </span><span class="sh">"""</span>
        <span class="n">S</span> <span class="o">=</span> <span class="sh">'</span><span class="s">##</span><span class="sh">'</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">s</span><span class="p">:</span>
            <span class="n">S</span> <span class="o">+=</span> <span class="n">i</span> <span class="o">+</span> <span class="sh">'</span><span class="s">#</span><span class="sh">'</span>
        <span class="n">M</span><span class="p">,</span> <span class="n">R</span><span class="p">,</span> <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span>
        <span class="n">p</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="nf">len</span><span class="p">(</span><span class="n">S</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">S</span><span class="p">)):</span>
            <span class="k">if</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">M</span><span class="p">:</span>
                <span class="n">p</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="nf">max</span><span class="p">(</span><span class="n">p</span><span class="p">[</span><span class="mi">2</span><span class="o">*</span><span class="n">M</span><span class="o">-</span><span class="n">i</span><span class="p">],</span> <span class="n">R</span><span class="o">-</span><span class="n">i</span><span class="p">)</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">p</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
            <span class="k">while</span> <span class="n">i</span><span class="o">-</span><span class="n">p</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">i</span><span class="o">+</span><span class="n">p</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="nf">len</span><span class="p">(</span><span class="n">S</span><span class="p">)</span> <span class="ow">and</span> <span class="n">S</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="n">p</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span> <span class="o">==</span> <span class="n">S</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="n">p</span><span class="p">[</span><span class="n">i</span><span class="p">]]:</span>
                <span class="n">p</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="k">if</span> <span class="n">R</span> <span class="o">&lt;</span> <span class="n">i</span><span class="o">+</span><span class="n">p</span><span class="p">[</span><span class="n">i</span><span class="p">]:</span>
                <span class="n">M</span> <span class="o">=</span> <span class="n">i</span>
                <span class="n">R</span> <span class="o">=</span> <span class="n">i</span><span class="o">+</span><span class="n">p</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
            <span class="k">if</span> <span class="n">ans</span> <span class="o">&lt;</span> <span class="n">p</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">-</span><span class="mi">1</span><span class="p">:</span>
                <span class="n">ans</span> <span class="o">=</span> <span class="n">p</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">-</span><span class="mi">1</span>
                <span class="n">z</span> <span class="o">=</span> <span class="n">i</span>
        <span class="n">ret</span> <span class="o">=</span> <span class="n">ss</span><span class="p">[</span><span class="n">z</span><span class="o">-</span><span class="n">ans</span><span class="o">+</span><span class="mi">1</span><span class="p">:</span><span class="n">z</span><span class="o">+</span><span class="n">ans</span><span class="p">].</span><span class="nf">replace</span><span class="p">(</span><span class="sh">'</span><span class="s">#</span><span class="sh">'</span><span class="p">,</span> <span class="sh">''</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">ret</span>
</code></pre></div></div>

<h3 id="6z字形变换"><a href="https://leetcode-cn.com/problems/zigzag-conversion/description/">6.Z字形变换</a></h3>

<p>将字符串以Z字形排列成给定的行数，然后从左往右逐行读取字符得到新串，返回该新串。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">convert</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">s</span><span class="p">,</span> <span class="n">numRows</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">
        :type s: str
        :type numRows: int
        :rtype: str
        </span><span class="sh">"""</span>
        <span class="k">if</span> <span class="n">numRows</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">:</span> <span class="k">return</span> <span class="n">s</span>
        <span class="n">x</span><span class="p">,</span> <span class="n">d</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span>
        <span class="n">t</span> <span class="o">=</span> <span class="p">[[]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">numRows</span><span class="p">)]</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">s</span><span class="p">:</span>
            <span class="n">t</span><span class="p">[</span><span class="n">x</span><span class="p">].</span><span class="nf">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
            <span class="n">x</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">d</span>
            <span class="k">if</span> <span class="n">x</span> <span class="o">==</span> <span class="n">numRows</span> <span class="o">-</span> <span class="mi">1</span><span class="p">:</span>
                <span class="n">d</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
            <span class="k">elif</span> <span class="n">x</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                <span class="n">d</span> <span class="o">=</span> <span class="mi">1</span>
        <span class="n">ans</span> <span class="o">=</span> <span class="sh">''</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">t</span><span class="p">:</span>
            <span class="n">ans</span> <span class="o">+=</span> <span class="sh">''</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">ans</span>
</code></pre></div></div>

<h3 id="7反转整数"><a href="https://leetcode-cn.com/problems/reverse-integer/description/">7.反转整数</a></h3>

<p>给定一个32位有符号整数，将数字进行反转，如反转后会溢出，则返回0。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">reverse</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">
        :type x: int
        :rtype: int
        </span><span class="sh">"""</span>
        <span class="n">s</span> <span class="o">=</span> <span class="nf">str</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
        <span class="n">sign</span> <span class="o">=</span> <span class="sh">''</span>
        <span class="k">if</span> <span class="n">s</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="sh">'</span><span class="s">-</span><span class="sh">'</span><span class="p">:</span>
            <span class="n">sign</span> <span class="o">=</span> <span class="sh">'</span><span class="s">-</span><span class="sh">'</span>
            <span class="n">s</span> <span class="o">=</span> <span class="n">s</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span>
        <span class="n">ans</span> <span class="o">=</span> <span class="n">sign</span> <span class="o">+</span> <span class="n">s</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
        <span class="n">ans</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">ans</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">ans</span> <span class="o">&lt;</span> <span class="o">-</span><span class="mi">2</span><span class="o">**</span><span class="mi">31</span> <span class="ow">or</span> <span class="n">ans</span> <span class="o">&gt;</span> <span class="mi">2</span><span class="o">**</span><span class="mi">31</span><span class="o">-</span><span class="mi">1</span><span class="p">:</span>
            <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">return</span> <span class="n">ans</span>
</code></pre></div></div>

<h3 id="8字符串转整数"><a href="https://leetcode-cn.com/problems/string-to-integer-atoi/description/">8.字符串转整数</a></h3>

<p>实现类似atoi的功能，将字符串转为整数。要求：</p>

<ul>
  <li>忽略起始的空白字符</li>
  <li>可以有前导的正负号</li>
  <li>可以在形成整数的字符后面有多余的字符，将被忽略</li>
  <li>对于无效字符串，返回0</li>
  <li>超出INT_MAX或INT_MIN，返回INT_MAX与INT_MIN</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">myAtoi</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">
        :type str: str
        :rtype: int
        </span><span class="sh">"""</span>
        <span class="n">s</span> <span class="o">=</span> <span class="nb">str</span><span class="p">.</span><span class="nf">lstrip</span><span class="p">()</span>
        <span class="n">sign</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                <span class="k">if</span> <span class="n">j</span> <span class="o">==</span> <span class="sh">'</span><span class="s">-</span><span class="sh">'</span><span class="p">:</span>
                    <span class="n">sign</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
                <span class="k">elif</span> <span class="n">j</span> <span class="o">==</span> <span class="sh">'</span><span class="s">+</span><span class="sh">'</span><span class="p">:</span>
                    <span class="n">sign</span> <span class="o">=</span> <span class="mi">1</span>
                <span class="k">elif</span> <span class="n">j</span><span class="p">.</span><span class="nf">isdigit</span><span class="p">():</span>
                    <span class="n">sign</span> <span class="o">=</span> <span class="mi">1</span>
                    <span class="n">ans</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">j</span><span class="p">)</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="k">return</span> <span class="mi">0</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">if</span> <span class="n">j</span><span class="p">.</span><span class="nf">isdigit</span><span class="p">():</span>
                    <span class="n">ans</span> <span class="o">=</span> <span class="n">ans</span> <span class="o">*</span> <span class="mi">10</span> <span class="o">+</span> <span class="nf">int</span><span class="p">(</span><span class="n">j</span><span class="p">)</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="k">break</span>
        <span class="n">ans</span> <span class="o">*=</span> <span class="n">sign</span>
        <span class="n">ans</span> <span class="o">=</span> <span class="nf">min</span><span class="p">(</span><span class="n">ans</span><span class="p">,</span> <span class="mi">2</span><span class="o">**</span><span class="mi">31</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
        <span class="n">ans</span> <span class="o">=</span> <span class="nf">max</span><span class="p">(</span><span class="n">ans</span><span class="p">,</span> <span class="o">-</span><span class="mi">2</span><span class="o">**</span><span class="mi">31</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">ans</span>
</code></pre></div></div>

<h3 id="9回文数"><a href="https://leetcode-cn.com/problems/palindrome-number/description/">9.回文数</a></h3>

<p>判断一个整数是否是回文数，即正序读和倒序读是一样的。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">isPalindrome</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">
        :type x: int
        :rtype: bool
        </span><span class="sh">"""</span>
        <span class="n">s</span> <span class="o">=</span> <span class="nf">str</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">s</span> <span class="o">==</span> <span class="n">s</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</code></pre></div></div>

<h3 id="10正则表达式匹配"><a href="https://leetcode-cn.com/problems/regular-expression-matching/description/">10.正则表达式匹配</a></h3>

<p>给定一个字符串s和一个字符模式p，实现支持点号和星号的正则表达式匹配。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">isMatch</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">s</span><span class="p">,</span> <span class="n">p</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">
        :type s: str
        :type p: str
        :rtype: bool
        </span><span class="sh">"""</span>
        <span class="n">p</span> <span class="o">=</span> <span class="sh">'</span><span class="s">^</span><span class="sh">'</span> <span class="o">+</span> <span class="n">p</span> <span class="o">+</span> <span class="sh">'</span><span class="s">$</span><span class="sh">'</span>
        <span class="n">ok</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">match</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">s</span><span class="p">)</span>
        <span class="k">return</span> <span class="bp">True</span> <span class="k">if</span> <span class="n">ok</span> <span class="k">else</span> <span class="bp">False</span>
</code></pre></div></div>]]></content><author><name>chenfy27</name></author><category term="LeetCode" /><summary type="html"><![CDATA[为熟悉python，这里选择用它来写LeetCode上的题目练手，在能通过的前提下尽可能地让代码简单清晰。]]></summary></entry><entry><title type="html">python中的栈和队列</title><link href="http://0.0.0.0:4000/blog/2018/06/23/queue-and-stack-in-python.html" rel="alternate" type="text/html" title="python中的栈和队列" /><published>2018-06-23T00:00:00+08:00</published><updated>2018-06-23T00:00:00+08:00</updated><id>http://0.0.0.0:4000/blog/2018/06/23/queue-and-stack-in-python</id><content type="html" xml:base="http://0.0.0.0:4000/blog/2018/06/23/queue-and-stack-in-python.html"><![CDATA[<p>栈和队列是较常用的数据结构，本文整理了它们在python下的高效实现方法。</p>

<h3 id="栈">栈</h3>

<p>python内置了list类型，通过它的append和pop方法就可以实现栈的功能，由于各项操作都是O(1)的，速度还算快。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Stack</span><span class="p">():</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">data</span> <span class="o">=</span> <span class="p">[]</span>
    
    <span class="k">def</span> <span class="nf">push</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">item</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">data</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">top</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">data</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>

    <span class="k">def</span> <span class="nf">pop</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">data</span><span class="p">.</span><span class="nf">pop</span><span class="p">()</span>
    
    <span class="k">def</span> <span class="nf">empty</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="nf">len</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">data</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span>

    <span class="k">def</span> <span class="nf">size</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="nf">len</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">data</span><span class="p">)</span>
</code></pre></div></div>

<p>经测试验证，使用collections模块中的deque来实现栈效率还要高些，deque常用的接口列出如下：</p>

<table border="1" cellspacing="0" style="width:800px; height:100px; text-align:left" cellpadding="6">
<tr><td>append(x)</td><td>add x to the right side of the deque</td></tr>
<tr><td>appendleft(x)</td><td>add x to the left side of the deque</td></tr>
<tr><td>pop()</td><td>remove and return an element from the right side of the deque</td></tr>
<tr><td>popleft()</td><td>remove and return an element from the left side of the deque</td></tr>
<tr><td>clear()</td><td>remove all elements from the deque</td></tr>
<tr><td>count(x)</td><td>count the number of elements equal to x</td></tr>
<tr><td>len(d)</td><td>return number of elements in deque d</td></tr>
<tr><td>if d:</td><td>check if deque d is empty or not</td></tr>
</table>
<p />

<p>在python中，对于list, tuple, string, dict等类型的对象x，都可以用if x的方式来判断是否为空。</p>

<p>对于栈，使用append和pop的组合即可实现。</p>

<h3 id="队列">队列</h3>

<p>可以用list的append/pop(0)或者insert(0)/pop()来实现队列，由于insert(0)和pop(0)是O(n)的，效率不够好，建议直接用标准库collections提供的deque。</p>

<p>对于队列，使用append和popleft的组合即可实现，当然也可以用appendleft和pop来做。</p>

<h3 id="优先队列">优先队列</h3>

<p>可以使用list结构自行实现二叉堆，而python库中也有多种实现，经过测试，性能最好的要属heapq模块，建议使用。</p>

<p>需要注意的是，python提供的二叉堆堆顶元素下标为0，并且默认均是小根堆。</p>

<table border="1" cellspacing="0" style="width:800px; height:100px; text-align:left" cellpadding="6">
<tr><td>heappush(heap, item)</td><td>push item onto heap and maintain heap invariant</td></tr>
<tr><td>heap[0]</td><td>access the smallest item without popping it</td></tr>
<tr><td>heappop(heap)</td><td>pop and return the smallest item from heap</td></tr>
<tr><td>heapify(x)</td><td>transform list x into a heap, in-place, in linear time</td></tr>
</table>
<p />

<h3 id="性能测试">性能测试</h3>

<p>下面编写代码对上述三种数据结构做性能测试。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">logging</span> <span class="k">as</span> <span class="n">log</span>
<span class="kn">from</span> <span class="n">collections</span> <span class="kn">import</span> <span class="n">deque</span>
<span class="kn">import</span> <span class="n">heapq</span>

<span class="k">def</span> <span class="nf">TestStack</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
    <span class="n">log</span><span class="p">.</span><span class="nf">debug</span><span class="p">(</span><span class="sh">'</span><span class="s">===== begin test stack =====</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">s</span> <span class="o">=</span> <span class="nf">deque</span><span class="p">()</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
        <span class="n">s</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
    <span class="n">log</span><span class="p">.</span><span class="nf">debug</span><span class="p">(</span><span class="sh">'</span><span class="s">stack push ok</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">i</span> <span class="o">=</span> <span class="n">n</span>
    <span class="k">while</span> <span class="n">s</span><span class="p">:</span>
        <span class="n">i</span> <span class="o">-=</span> <span class="mi">1</span>
        <span class="nf">assert</span><span class="p">(</span><span class="n">i</span> <span class="o">==</span> <span class="n">s</span><span class="p">.</span><span class="nf">pop</span><span class="p">())</span>
    <span class="n">log</span><span class="p">.</span><span class="nf">debug</span><span class="p">(</span><span class="sh">'</span><span class="s">stack pop ok</span><span class="sh">'</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">TestQueue</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
    <span class="n">log</span><span class="p">.</span><span class="nf">debug</span><span class="p">(</span><span class="sh">'</span><span class="s">===== begin test queue =====</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">q</span> <span class="o">=</span> <span class="nf">deque</span><span class="p">()</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
        <span class="n">q</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
    <span class="n">log</span><span class="p">.</span><span class="nf">debug</span><span class="p">(</span><span class="sh">'</span><span class="s">queue push ok</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">while</span> <span class="n">q</span><span class="p">:</span>
        <span class="nf">assert</span><span class="p">(</span><span class="n">i</span> <span class="o">==</span> <span class="n">q</span><span class="p">.</span><span class="nf">popleft</span><span class="p">())</span>
        <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="n">log</span><span class="p">.</span><span class="nf">debug</span><span class="p">(</span><span class="sh">'</span><span class="s">queue pop ok</span><span class="sh">'</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">TestPriorityQueue</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
    <span class="n">log</span><span class="p">.</span><span class="nf">debug</span><span class="p">(</span><span class="sh">'</span><span class="s">===== begin test priority queue =====</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">pq</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
        <span class="n">heapq</span><span class="p">.</span><span class="nf">heappush</span><span class="p">(</span><span class="n">pq</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span>
    <span class="n">log</span><span class="p">.</span><span class="nf">debug</span><span class="p">(</span><span class="sh">'</span><span class="s">priority queue push ok</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">while</span> <span class="n">pq</span><span class="p">:</span>
        <span class="nf">assert</span><span class="p">(</span><span class="n">i</span> <span class="o">==</span> <span class="n">pq</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
        <span class="n">heapq</span><span class="p">.</span><span class="nf">heappop</span><span class="p">(</span><span class="n">pq</span><span class="p">)</span>
        <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="n">log</span><span class="p">.</span><span class="nf">debug</span><span class="p">(</span><span class="sh">'</span><span class="s">priority queue pop ok</span><span class="sh">'</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">log</span><span class="p">.</span><span class="nf">basicConfig</span><span class="p">(</span><span class="n">level</span><span class="o">=</span><span class="n">log</span><span class="p">.</span><span class="n">DEBUG</span><span class="p">,</span> <span class="nb">format</span><span class="o">=</span><span class="sh">'</span><span class="s">%(asctime)s - %(message)s</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">N</span> <span class="o">=</span> <span class="mi">1000000</span>
    <span class="nc">TestStack</span><span class="p">(</span><span class="n">N</span><span class="p">)</span>
    <span class="nc">TestQueue</span><span class="p">(</span><span class="n">N</span><span class="p">)</span>
    <span class="nc">TestPriorityQueue</span><span class="p">(</span><span class="n">N</span><span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">'</span><span class="s">__main__</span><span class="sh">'</span><span class="p">:</span>
    <span class="nf">main</span><span class="p">()</span>
</code></pre></div></div>

<p>某次运行结果如下：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ time python3 z.py 
2018-06-23 15:34:45,030 - ===== begin test stack =====
2018-06-23 15:34:45,175 - stack push ok
2018-06-23 15:34:45,384 - stack pop ok
2018-06-23 15:34:45,384 - ===== begin test queue =====
2018-06-23 15:34:45,521 - queue push ok
2018-06-23 15:34:45,740 - queue pop ok
2018-06-23 15:34:45,740 - ===== begin test priority queue =====
2018-06-23 15:34:46,001 - priority queue push ok
2018-06-23 15:34:46,859 - priority queue pop ok

real       0m1.889s
user       0m1.790s
sys        0m0.078s
</code></pre></div></div>

<p>运行速度非常快，接近C/C++的性能。</p>]]></content><author><name>chenfy27</name></author><category term="python" /><summary type="html"><![CDATA[栈和队列是较常用的数据结构，本文整理了它们在python下的高效实现方法。]]></summary></entry><entry><title type="html">stl常用容器方法</title><link href="http://0.0.0.0:4000/blog/2018/06/22/common-stl-containers.html" rel="alternate" type="text/html" title="stl常用容器方法" /><published>2018-06-22T00:00:00+08:00</published><updated>2018-06-22T00:00:00+08:00</updated><id>http://0.0.0.0:4000/blog/2018/06/22/common-stl-containers</id><content type="html" xml:base="http://0.0.0.0:4000/blog/2018/06/22/common-stl-containers.html"><![CDATA[<h3 id="vector">vector</h3>

<ul>
  <li>push_back(val)</li>
  <li>pop_back()</li>
  <li>empty()</li>
  <li>size()</li>
  <li>front()</li>
  <li>back()</li>
  <li>insert(pos, val)</li>
  <li>erase(pos)</li>
  <li>clear()</li>
</ul>

<h3 id="stack">stack</h3>

<ul>
  <li>push(val)</li>
  <li>top()</li>
  <li>pop()</li>
  <li>empty()</li>
  <li>size()</li>
</ul>

<h3 id="queue">queue</h3>

<ul>
  <li>push(val)</li>
  <li>front()</li>
  <li>pop()</li>
  <li>empty()</li>
  <li>size()</li>
</ul>

<h3 id="deque">deque</h3>

<ul>
  <li>push_back(val)</li>
  <li>push_front(val)</li>
  <li>front()</li>
  <li>back()</li>
  <li>pop_back()</li>
  <li>pop_front()</li>
  <li>empty()</li>
  <li>size()</li>
</ul>

<h3 id="priority_queue">priority_queue</h3>

<ul>
  <li>push(val)</li>
  <li>top()</li>
  <li>pop()</li>
  <li>empty()</li>
  <li>size()</li>
</ul>

<h3 id="list">list</h3>

<ul>
  <li>push_back(val)</li>
  <li>push_front(val)</li>
  <li>front()</li>
  <li>back()</li>
  <li>pop_back()</li>
  <li>pop_front()</li>
  <li>insert(pos, val)</li>
  <li>erase(pos)</li>
  <li>clear()</li>
  <li>sort()</li>
  <li>unique()</li>
  <li>reverse()</li>
  <li>remove()</li>
  <li>remove_if()</li>
  <li>merge()</li>
</ul>

<h3 id="mapmultimapunordered_map">map/multimap/unordered_map</h3>

<ul>
  <li>insert(make_pair(key, val))</li>
  <li>mp[key] = val (for map and unordered_map)</li>
  <li>erase(key)</li>
  <li>empty()</li>
  <li>size()</li>
  <li>clear()</li>
  <li>find(key)</li>
  <li>count(key)</li>
  <li>lower_bound(key) (for map and multimap)</li>
  <li>upper_bound(key) (for map and multimap)</li>
  <li>equal_range(key)</li>
</ul>

<h3 id="setmultisetunordered_set">set/multiset/unordered_set</h3>

<ul>
  <li>insert(key)</li>
  <li>erase(key)</li>
  <li>empty()</li>
  <li>size()</li>
  <li>clear()</li>
  <li>find(key)</li>
  <li>count(key)</li>
  <li>lower_bound(key) (for set and multiset)</li>
  <li>upper_bound(key) (for set and multiset)</li>
  <li>equal_range(key)</li>
</ul>]]></content><author><name>chenfy27</name></author><category term="cpp" /><summary type="html"><![CDATA[vector]]></summary></entry><entry><title type="html">线性回归之最小二乘法</title><link href="http://0.0.0.0:4000/blog/2018/06/21/linear-regression-by-least-squares.html" rel="alternate" type="text/html" title="线性回归之最小二乘法" /><published>2018-06-21T00:00:00+08:00</published><updated>2018-06-21T00:00:00+08:00</updated><id>http://0.0.0.0:4000/blog/2018/06/21/linear-regression-by-least-squares</id><content type="html" xml:base="http://0.0.0.0:4000/blog/2018/06/21/linear-regression-by-least-squares.html"><![CDATA[<h3 id="问题描述">问题描述</h3>

<p>假设自变量\((X_{1}, X_{2},\cdots,X_{n})\)与因变量\(Y\)之间满足某种线性关系：</p>

\[Y = \theta_{0} + \theta_{1}X_{1} + \theta_{2}X_{2} + \cdots + \theta_{n}X_{n}\]

<p>为了表示方便，令\(X_{0}=1\)，那么上式可用矩阵的方式简写为：</p>

\[Y = X^{T}\theta\]

<p>其中\(X\)和\(\theta\)为列向量。</p>

\[X = 
\begin{bmatrix}
    X_{0} \\
    X_{1} \\
    \cdots \\
    X_{n} \\
\end{bmatrix}
,
\theta =
\begin{bmatrix}
    \theta_{0} \\
    \theta_{1} \\
    \cdots \\
    \theta_{n} \\
\end{bmatrix}\]

<p>现给出\(m\)组样本数据，求参数\(\theta\)，使上述等式关系尽可能得符合各个样本。这是一个典型的线性回归问题，常见的解法是最小二乘法和梯度下降法，这里介绍最小二乘法。</p>

<h3 id="最小二乘法">最小二乘法</h3>

<p>根据关系式\(Y = X^{T}\theta\)，构造残差函数\(L(\theta)=\frac{1}{2}(X^{T}\theta-Y)^{T}(X^{T}\theta-Y)\)，为了让\(L(\theta)\)取得最小值，令\(L(\theta)\)对\(\theta\)的一阶导数为零，解出\(\theta\)：</p>

\[\theta = (X^{T}X)^{-1} X^{T} Y\]

<p>可见，通过最小二乘法求解\(\theta\)主要是进行矩阵乘法运算，由于矩阵乘法的时间复杂度是\(O(n^{3})\)级别的，因此只适用于数据量较小的场景。</p>

<h3 id="求解实例">求解实例</h3>

<p>假设有线性关系\(Y = 9 + 4X_{1} + X_{2} + 2X_{3}\)，下面随机生成一些数据作为样本，用于求解系数。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">random</span>

<span class="k">def</span> <span class="nf">func</span><span class="p">(</span><span class="n">x1</span><span class="p">,</span> <span class="n">x2</span><span class="p">,</span> <span class="n">x3</span><span class="p">):</span>
    <span class="k">return</span> <span class="mi">9</span> <span class="o">+</span> <span class="mi">4</span><span class="o">*</span><span class="n">x1</span> <span class="o">+</span> <span class="n">x2</span> <span class="o">+</span> <span class="mi">2</span><span class="o">*</span><span class="n">x3</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">5</span><span class="p">):</span>
    <span class="n">x1</span> <span class="o">=</span> <span class="n">random</span><span class="p">.</span><span class="nf">randint</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
    <span class="n">x2</span> <span class="o">=</span> <span class="n">random</span><span class="p">.</span><span class="nf">randint</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
    <span class="n">x3</span> <span class="o">=</span> <span class="n">random</span><span class="p">.</span><span class="nf">randint</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
    <span class="n">y</span> <span class="o">=</span> <span class="nf">func</span><span class="p">(</span><span class="n">x1</span><span class="p">,</span> <span class="n">x2</span><span class="p">,</span> <span class="n">x3</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="n">x1</span><span class="p">,</span> <span class="n">x2</span><span class="p">,</span> <span class="n">x3</span><span class="p">)</span>
</code></pre></div></div>

<p>某次运行结果如下：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>71 10 8 7
72 10 5 9
42 2 5 10
39 1 8 9
56 6 7 8
</code></pre></div></div>

<p>下面根据最小二乘法的结论来求解参数。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">from</span> <span class="n">numpy</span> <span class="kn">import</span> <span class="n">dot</span>
<span class="kn">from</span> <span class="n">numpy.linalg</span> <span class="kn">import</span> <span class="n">inv</span>

<span class="n">X</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">7</span><span class="p">],[</span><span class="mi">1</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">9</span><span class="p">],[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">10</span><span class="p">],[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">],[</span><span class="mi">1</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">]])</span>
<span class="n">Y</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([[</span><span class="mi">71</span><span class="p">],[</span><span class="mi">72</span><span class="p">],[</span><span class="mi">42</span><span class="p">],[</span><span class="mi">39</span><span class="p">],[</span><span class="mi">56</span><span class="p">]])</span>

<span class="n">theta</span> <span class="o">=</span> <span class="nf">dot</span><span class="p">(</span><span class="nf">dot</span><span class="p">(</span><span class="nf">inv</span><span class="p">(</span><span class="nf">dot</span><span class="p">(</span><span class="n">X</span><span class="p">.</span><span class="n">T</span><span class="p">,</span> <span class="n">X</span><span class="p">)),</span> <span class="n">X</span><span class="p">.</span><span class="n">T</span><span class="p">),</span> <span class="n">Y</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">theta</span><span class="p">)</span>
</code></pre></div></div>

<p>运行结果如下：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[[9.]
[4.]
[1.]
[2.]]
</code></pre></div></div>

<p>即通过回归分析得到的关系式为：\(Y = 9 + 4X_{1} + X_{2} + 2X_{3}\)，与预期相符。</p>

<p>再如，假定国内生产总值GDP与消费Consumption、货币供应量MO、进出口总额EM以及投资Investment这4个因素存在某种线性关系，<a href="/blog//data/yeardata.csv">这里</a>提供了一些样本数据，试着量化该线性关系。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">from</span> <span class="n">numpy</span> <span class="kn">import</span> <span class="n">dot</span>
<span class="kn">from</span> <span class="n">numpy.linalg</span> <span class="kn">import</span> <span class="n">inv</span>

<span class="n">data</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_csv</span><span class="p">(</span><span class="sh">'</span><span class="s">yeardata.csv</span><span class="sh">'</span><span class="p">)</span>
<span class="n">X</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="n">iloc</span><span class="p">[:,</span> <span class="mi">1</span><span class="p">:</span><span class="mi">5</span><span class="p">]</span>
<span class="n">X</span><span class="p">[</span><span class="sh">'</span><span class="s">X0</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
<span class="n">X</span> <span class="o">=</span> <span class="n">X</span><span class="p">.</span><span class="n">iloc</span><span class="p">[:,</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]]</span>
<span class="c1">#print(X)
</span><span class="n">Y</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="n">iloc</span><span class="p">[:,</span> <span class="mi">0</span><span class="p">]</span>
<span class="c1">#print(Y)
</span>
<span class="n">theta</span> <span class="o">=</span> <span class="nf">dot</span><span class="p">(</span><span class="nf">dot</span><span class="p">(</span><span class="nf">inv</span><span class="p">(</span><span class="nf">dot</span><span class="p">(</span><span class="n">X</span><span class="p">.</span><span class="n">T</span><span class="p">,</span> <span class="n">X</span><span class="p">)),</span> <span class="n">X</span><span class="p">.</span><span class="n">T</span><span class="p">),</span> <span class="n">Y</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">theta</span><span class="p">)</span>
</code></pre></div></div>

<p>计算结果如下：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[-94.51398652   1.32825128   2.06138007   0.38959829   0.11848647]
</code></pre></div></div>

<p>即\(GDP = -94.514 + 1.328Consumption + 2.061MO + 0.390EM + 0.118Investment\)。</p>]]></content><author><name>chenfy27</name></author><category term="机器" /><summary type="html"><![CDATA[问题描述]]></summary></entry><entry><title type="html">支持多语言gettext</title><link href="http://0.0.0.0:4000/blog/2018/06/18/gettext.html" rel="alternate" type="text/html" title="支持多语言gettext" /><published>2018-06-18T00:00:00+08:00</published><updated>2018-06-18T00:00:00+08:00</updated><id>http://0.0.0.0:4000/blog/2018/06/18/gettext</id><content type="html" xml:base="http://0.0.0.0:4000/blog/2018/06/18/gettext.html"><![CDATA[<p>有时，程序展现给用户的信息需要支持多种语言，并且允许在语言之间做灵活的切换，最为常见的场景是支持中英文，GNU的gettext是一个支持多语言的成熟解决方案。</p>

<h3 id="编程接口">编程接口</h3>

<p>使用gettext需要用到的API如下所示：</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;locale.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;libintl.h&gt;</span><span class="cp">
</span>
<span class="kt">char</span><span class="o">*</span> <span class="nf">setlocale</span><span class="p">(</span><span class="kt">int</span> <span class="n">category</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">locale</span><span class="p">);</span>
<span class="kt">char</span><span class="o">*</span> <span class="nf">bindtextdomain</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">domainname</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">dirname</span><span class="p">);</span>
<span class="kt">char</span><span class="o">*</span> <span class="nf">textdomain</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">domainname</span><span class="p">);</span>
</code></pre></div></div>

<p>其中：</p>

<ul>
  <li>mo文件位置一般是dirname/locale/category/domainname.mo。</li>
  <li>bindtextdomain与textdomain中的domainname参数必须一致，为mo文件的文件名，不带.mo后缀。</li>
</ul>

<h3 id="使用示例">使用示例</h3>

<p>以输出hello为例，以下是相关源码hello.c，假设mo文件取名为scott.mo。</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;locale.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;libintl.h&gt;</span><span class="cp">
</span>
<span class="cp">#define _(str) gettext(str)
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
    <span class="n">setlocale</span><span class="p">(</span><span class="n">LC_ALL</span><span class="p">,</span> <span class="s">""</span><span class="p">);</span>
    <span class="n">bindtextdomain</span><span class="p">(</span><span class="s">"scott"</span><span class="p">,</span> <span class="s">"lang"</span><span class="p">);</span>
    <span class="n">textdomain</span><span class="p">(</span><span class="s">"scott"</span><span class="p">);</span>
    <span class="n">puts</span><span class="p">(</span><span class="n">_</span><span class="p">(</span><span class="s">"hello"</span><span class="p">));</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>编译时需要链上intl库。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gcc -o hello hello.c -g -Wall -lintl
</code></pre></div></div>

<p>通过xgettext工具从代码中自动提取需要翻译的内容，得到scott.po文件。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ xgettext -k_ hello.c -o scott.po

$ cat  scott.po
# SOME DESCRIPTIVE TITLE.
# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR &lt;EMAIL@ADDRESS&gt;, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-06-19 10:17+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME &lt;EMAIL@ADDRESS&gt;\n"
"Language-Team: LANGUAGE &lt;LL@li.org&gt;\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#: hello.c:11
msgid "hello"
msgstr ""

$ mkdir -p lang/{en_US,zh_CN}/LC_MESSAGES
$ cp scott.po lang/en_US/LC_MESSAGES
$ cp scott.po lang/zh_CN/LC_MESSAGES
</code></pre></div></div>

<p>修改各po文件的msgstr项，设成翻译后的内容。作为例子，这里生成了zh_CN和en_US两个po文件，其中zh_CN的scott.po里msgstr置成”say hello in chinese”, 而en_US的scott.po设为”say hello in english”。另外，默认生成的po文件charset未设置，建议改成UTF-8。</p>

<p>接着根据po文本文件成mo二进制文件。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ msgfmt scott.po -o scott.mo
</code></pre></div></div>

<p>最后，运行程序，将根据当前语言输出对应的内容。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ echo $LANG
zh_CN.UTF-8
$ ./hello 
say hello in chinese
$ export LANG=en_US
$ ./hello 
say hello in english
</code></pre></div></div>]]></content><author><name>chenfy27</name></author><category term="平台" /><summary type="html"><![CDATA[有时，程序展现给用户的信息需要支持多种语言，并且允许在语言之间做灵活的切换，最为常见的场景是支持中英文，GNU的gettext是一个支持多语言的成熟解决方案。]]></summary></entry></feed>